
DecodeurMorse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004450  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004620  08004620  00005620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047cc  080047cc  00006110  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047cc  080047cc  000057cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d4  080047d4  00006110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d4  080047d4  000057d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080047dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000110  080048ec  00006110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080048ec  00006438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e123  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e18  00000000  00000000  00014263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00016080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  00016da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232d5  00000000  00000000  000177e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbcf  00000000  00000000  0003aabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd883  00000000  00000000  0004a68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  00127f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0012bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004608 	.word	0x08004608

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	08004608 	.word	0x08004608

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	@ 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b988 	b.w	8000d24 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	468e      	mov	lr, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	4688      	mov	r8, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14a      	bne.n	8000ad2 <__udivmoddi4+0xa6>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4617      	mov	r7, r2
 8000a40:	d962      	bls.n	8000b08 <__udivmoddi4+0xdc>
 8000a42:	fab2 f682 	clz	r6, r2
 8000a46:	b14e      	cbz	r6, 8000a5c <__udivmoddi4+0x30>
 8000a48:	f1c6 0320 	rsb	r3, r6, #32
 8000a4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a50:	fa20 f303 	lsr.w	r3, r0, r3
 8000a54:	40b7      	lsls	r7, r6
 8000a56:	ea43 0808 	orr.w	r8, r3, r8
 8000a5a:	40b4      	lsls	r4, r6
 8000a5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a60:	fa1f fc87 	uxth.w	ip, r7
 8000a64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a68:	0c23      	lsrs	r3, r4, #16
 8000a6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a72:	fb01 f20c 	mul.w	r2, r1, ip
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d909      	bls.n	8000a8e <__udivmoddi4+0x62>
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a80:	f080 80ea 	bcs.w	8000c58 <__udivmoddi4+0x22c>
 8000a84:	429a      	cmp	r2, r3
 8000a86:	f240 80e7 	bls.w	8000c58 <__udivmoddi4+0x22c>
 8000a8a:	3902      	subs	r1, #2
 8000a8c:	443b      	add	r3, r7
 8000a8e:	1a9a      	subs	r2, r3, r2
 8000a90:	b2a3      	uxth	r3, r4
 8000a92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa2:	459c      	cmp	ip, r3
 8000aa4:	d909      	bls.n	8000aba <__udivmoddi4+0x8e>
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aac:	f080 80d6 	bcs.w	8000c5c <__udivmoddi4+0x230>
 8000ab0:	459c      	cmp	ip, r3
 8000ab2:	f240 80d3 	bls.w	8000c5c <__udivmoddi4+0x230>
 8000ab6:	443b      	add	r3, r7
 8000ab8:	3802      	subs	r0, #2
 8000aba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000abe:	eba3 030c 	sub.w	r3, r3, ip
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	b11d      	cbz	r5, 8000ace <__udivmoddi4+0xa2>
 8000ac6:	40f3      	lsrs	r3, r6
 8000ac8:	2200      	movs	r2, #0
 8000aca:	e9c5 3200 	strd	r3, r2, [r5]
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d905      	bls.n	8000ae2 <__udivmoddi4+0xb6>
 8000ad6:	b10d      	cbz	r5, 8000adc <__udivmoddi4+0xb0>
 8000ad8:	e9c5 0100 	strd	r0, r1, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e7f5      	b.n	8000ace <__udivmoddi4+0xa2>
 8000ae2:	fab3 f183 	clz	r1, r3
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d146      	bne.n	8000b78 <__udivmoddi4+0x14c>
 8000aea:	4573      	cmp	r3, lr
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xc8>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 8105 	bhi.w	8000cfe <__udivmoddi4+0x2d2>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4690      	mov	r8, r2
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d0e5      	beq.n	8000ace <__udivmoddi4+0xa2>
 8000b02:	e9c5 4800 	strd	r4, r8, [r5]
 8000b06:	e7e2      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	f000 8090 	beq.w	8000c2e <__udivmoddi4+0x202>
 8000b0e:	fab2 f682 	clz	r6, r2
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	f040 80a4 	bne.w	8000c60 <__udivmoddi4+0x234>
 8000b18:	1a8a      	subs	r2, r1, r2
 8000b1a:	0c03      	lsrs	r3, r0, #16
 8000b1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b20:	b280      	uxth	r0, r0
 8000b22:	b2bc      	uxth	r4, r7
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b32:	fb04 f20c 	mul.w	r2, r4, ip
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d907      	bls.n	8000b4a <__udivmoddi4+0x11e>
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x11c>
 8000b42:	429a      	cmp	r2, r3
 8000b44:	f200 80e0 	bhi.w	8000d08 <__udivmoddi4+0x2dc>
 8000b48:	46c4      	mov	ip, r8
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b58:	fb02 f404 	mul.w	r4, r2, r4
 8000b5c:	429c      	cmp	r4, r3
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x144>
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x142>
 8000b68:	429c      	cmp	r4, r3
 8000b6a:	f200 80ca 	bhi.w	8000d02 <__udivmoddi4+0x2d6>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	1b1b      	subs	r3, r3, r4
 8000b72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000b78:	f1c1 0620 	rsb	r6, r1, #32
 8000b7c:	408b      	lsls	r3, r1
 8000b7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b82:	431f      	orrs	r7, r3
 8000b84:	fa0e f401 	lsl.w	r4, lr, r1
 8000b88:	fa20 f306 	lsr.w	r3, r0, r6
 8000b8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b94:	4323      	orrs	r3, r4
 8000b96:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9a:	fa1f fc87 	uxth.w	ip, r7
 8000b9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ba2:	0c1c      	lsrs	r4, r3, #16
 8000ba4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ba8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x1a0>
 8000bb8:	193c      	adds	r4, r7, r4
 8000bba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bbe:	f080 809c 	bcs.w	8000cfa <__udivmoddi4+0x2ce>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f240 8099 	bls.w	8000cfa <__udivmoddi4+0x2ce>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	eba4 040e 	sub.w	r4, r4, lr
 8000bd0:	fa1f fe83 	uxth.w	lr, r3
 8000bd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x1ce>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bee:	f080 8082 	bcs.w	8000cf6 <__udivmoddi4+0x2ca>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d97f      	bls.n	8000cf6 <__udivmoddi4+0x2ca>
 8000bf6:	3b02      	subs	r3, #2
 8000bf8:	443c      	add	r4, r7
 8000bfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bfe:	eba4 040c 	sub.w	r4, r4, ip
 8000c02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c06:	4564      	cmp	r4, ip
 8000c08:	4673      	mov	r3, lr
 8000c0a:	46e1      	mov	r9, ip
 8000c0c:	d362      	bcc.n	8000cd4 <__udivmoddi4+0x2a8>
 8000c0e:	d05f      	beq.n	8000cd0 <__udivmoddi4+0x2a4>
 8000c10:	b15d      	cbz	r5, 8000c2a <__udivmoddi4+0x1fe>
 8000c12:	ebb8 0203 	subs.w	r2, r8, r3
 8000c16:	eb64 0409 	sbc.w	r4, r4, r9
 8000c1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c22:	431e      	orrs	r6, r3
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	e9c5 6400 	strd	r6, r4, [r5]
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	e74f      	b.n	8000ace <__udivmoddi4+0xa2>
 8000c2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c32:	0c01      	lsrs	r1, r0, #16
 8000c34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c38:	b280      	uxth	r0, r0
 8000c3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4638      	mov	r0, r7
 8000c42:	463c      	mov	r4, r7
 8000c44:	46b8      	mov	r8, r7
 8000c46:	46be      	mov	lr, r7
 8000c48:	2620      	movs	r6, #32
 8000c4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c4e:	eba2 0208 	sub.w	r2, r2, r8
 8000c52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c56:	e766      	b.n	8000b26 <__udivmoddi4+0xfa>
 8000c58:	4601      	mov	r1, r0
 8000c5a:	e718      	b.n	8000a8e <__udivmoddi4+0x62>
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	e72c      	b.n	8000aba <__udivmoddi4+0x8e>
 8000c60:	f1c6 0220 	rsb	r2, r6, #32
 8000c64:	fa2e f302 	lsr.w	r3, lr, r2
 8000c68:	40b7      	lsls	r7, r6
 8000c6a:	40b1      	lsls	r1, r6
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	430a      	orrs	r2, r1
 8000c76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c7a:	b2bc      	uxth	r4, r7
 8000c7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c80:	0c11      	lsrs	r1, r2, #16
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb08 f904 	mul.w	r9, r8, r4
 8000c8a:	40b0      	lsls	r0, r6
 8000c8c:	4589      	cmp	r9, r1
 8000c8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c92:	b280      	uxth	r0, r0
 8000c94:	d93e      	bls.n	8000d14 <__udivmoddi4+0x2e8>
 8000c96:	1879      	adds	r1, r7, r1
 8000c98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c9c:	d201      	bcs.n	8000ca2 <__udivmoddi4+0x276>
 8000c9e:	4589      	cmp	r9, r1
 8000ca0:	d81f      	bhi.n	8000ce2 <__udivmoddi4+0x2b6>
 8000ca2:	eba1 0109 	sub.w	r1, r1, r9
 8000ca6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000caa:	fb09 f804 	mul.w	r8, r9, r4
 8000cae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cb2:	b292      	uxth	r2, r2
 8000cb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb8:	4542      	cmp	r2, r8
 8000cba:	d229      	bcs.n	8000d10 <__udivmoddi4+0x2e4>
 8000cbc:	18ba      	adds	r2, r7, r2
 8000cbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cc2:	d2c4      	bcs.n	8000c4e <__udivmoddi4+0x222>
 8000cc4:	4542      	cmp	r2, r8
 8000cc6:	d2c2      	bcs.n	8000c4e <__udivmoddi4+0x222>
 8000cc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000ccc:	443a      	add	r2, r7
 8000cce:	e7be      	b.n	8000c4e <__udivmoddi4+0x222>
 8000cd0:	45f0      	cmp	r8, lr
 8000cd2:	d29d      	bcs.n	8000c10 <__udivmoddi4+0x1e4>
 8000cd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000cd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cdc:	3801      	subs	r0, #1
 8000cde:	46e1      	mov	r9, ip
 8000ce0:	e796      	b.n	8000c10 <__udivmoddi4+0x1e4>
 8000ce2:	eba7 0909 	sub.w	r9, r7, r9
 8000ce6:	4449      	add	r1, r9
 8000ce8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf0:	fb09 f804 	mul.w	r8, r9, r4
 8000cf4:	e7db      	b.n	8000cae <__udivmoddi4+0x282>
 8000cf6:	4673      	mov	r3, lr
 8000cf8:	e77f      	b.n	8000bfa <__udivmoddi4+0x1ce>
 8000cfa:	4650      	mov	r0, sl
 8000cfc:	e766      	b.n	8000bcc <__udivmoddi4+0x1a0>
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e6fd      	b.n	8000afe <__udivmoddi4+0xd2>
 8000d02:	443b      	add	r3, r7
 8000d04:	3a02      	subs	r2, #2
 8000d06:	e733      	b.n	8000b70 <__udivmoddi4+0x144>
 8000d08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0c:	443b      	add	r3, r7
 8000d0e:	e71c      	b.n	8000b4a <__udivmoddi4+0x11e>
 8000d10:	4649      	mov	r1, r9
 8000d12:	e79c      	b.n	8000c4e <__udivmoddi4+0x222>
 8000d14:	eba1 0109 	sub.w	r1, r1, r9
 8000d18:	46c4      	mov	ip, r8
 8000d1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1e:	fb09 f804 	mul.w	r8, r9, r4
 8000d22:	e7c4      	b.n	8000cae <__udivmoddi4+0x282>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:
static void MX_USART2_UART_Init(void);
void UART_SendString(char *str);

int recherche_morse(char* str);

int main(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b092      	sub	sp, #72	@ 0x48
 8000d2c:	af00      	add	r7, sp, #0
    HAL_Init();
 8000d2e:	f000 fc41 	bl	80015b4 <HAL_Init>
    SystemClock_Config();
 8000d32:	f000 fa61 	bl	80011f8 <SystemClock_Config>
    MX_GPIO_Init();
 8000d36:	f000 fa9d 	bl	8001274 <MX_GPIO_Init>
    MX_ADC1_Init();
 8000d3a:	f000 f9c1 	bl	80010c0 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000d3e:	f000 f9fd 	bl	800113c <MX_TIM2_Init>
    MX_USART2_UART_Init();
 8000d42:	f000 fa1f 	bl	8001184 <MX_USART2_UART_Init>

    HAL_ADC_Start(&hadc1);
 8000d46:	4880      	ldr	r0, [pc, #512]	@ (8000f48 <main+0x220>)
 8000d48:	f000 fcea 	bl	8001720 <HAL_ADC_Start>
    HAL_TIM_Base_Start_IT(&htim2);
 8000d4c:	487f      	ldr	r0, [pc, #508]	@ (8000f4c <main+0x224>)
 8000d4e:	f002 f95d 	bl	800300c <HAL_TIM_Base_Start_IT>

    while (1) {
        if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8000d52:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d56:	487c      	ldr	r0, [pc, #496]	@ (8000f48 <main+0x220>)
 8000d58:	f000 fdb4 	bl	80018c4 <HAL_ADC_PollForConversion>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f7      	bne.n	8000d52 <main+0x2a>
            uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000d62:	4879      	ldr	r0, [pc, #484]	@ (8000f48 <main+0x220>)
 8000d64:	f000 fe39 	bl	80019da <HAL_ADC_GetValue>
 8000d68:	63f8      	str	r0, [r7, #60]	@ 0x3c
            uint32_t max_adc_value = adc_value;
 8000d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d6c:	647b      	str	r3, [r7, #68]	@ 0x44

            sound_d = __HAL_TIM_GET_COUNTER(&htim2);
 8000d6e:	4b77      	ldr	r3, [pc, #476]	@ (8000f4c <main+0x224>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d74:	4a76      	ldr	r2, [pc, #472]	@ (8000f50 <main+0x228>)
 8000d76:	6013      	str	r3, [r2, #0]
            sound_f = __HAL_TIM_GET_COUNTER(&htim2);
 8000d78:	4b74      	ldr	r3, [pc, #464]	@ (8000f4c <main+0x224>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	4a75      	ldr	r2, [pc, #468]	@ (8000f54 <main+0x22c>)
 8000d80:	6013      	str	r3, [r2, #0]

            // Écoute sur une courte durée pour détecter le pic de volume
            while ((sound_f - sound_d) * (1000.0 / 5250.0) < 50){
 8000d82:	e00e      	b.n	8000da2 <main+0x7a>
                adc_value = HAL_ADC_GetValue(&hadc1);
 8000d84:	4870      	ldr	r0, [pc, #448]	@ (8000f48 <main+0x220>)
 8000d86:	f000 fe28 	bl	80019da <HAL_ADC_GetValue>
 8000d8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
                sound_f = __HAL_TIM_GET_COUNTER(&htim2);
 8000d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8000f4c <main+0x224>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d92:	4a70      	ldr	r2, [pc, #448]	@ (8000f54 <main+0x22c>)
 8000d94:	6013      	str	r3, [r2, #0]
                if (adc_value > max_adc_value){
 8000d96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d901      	bls.n	8000da2 <main+0x7a>
                    max_adc_value = adc_value;
 8000d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000da0:	647b      	str	r3, [r7, #68]	@ 0x44
            while ((sound_f - sound_d) * (1000.0 / 5250.0) < 50){
 8000da2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f54 <main+0x22c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b6a      	ldr	r3, [pc, #424]	@ (8000f50 <main+0x228>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fd03 	bl	80007b8 <__aeabi_ui2d>
 8000db2:	a363      	add	r3, pc, #396	@ (adr r3, 8000f40 <main+0x218>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fa92 	bl	80002e0 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	4b63      	ldr	r3, [pc, #396]	@ (8000f58 <main+0x230>)
 8000dca:	f7ff fdcf 	bl	800096c <__aeabi_dcmplt>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1d7      	bne.n	8000d84 <main+0x5c>
                sprintf(buffer, "Niveau ADC: %lu\r\n", max_adc_value);
                UART_SendString(buffer);
            }
            */

            if (max_adc_value > THRESHOLD && !is_sound_detected) {
 8000dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dd6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dda:	d913      	bls.n	8000e04 <main+0xdc>
 8000ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8000f5c <main+0x234>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10f      	bne.n	8000e04 <main+0xdc>
                sound_start = __HAL_TIM_GET_COUNTER(&htim2);
 8000de4:	4b59      	ldr	r3, [pc, #356]	@ (8000f4c <main+0x224>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dea:	4a5d      	ldr	r2, [pc, #372]	@ (8000f60 <main+0x238>)
 8000dec:	6013      	str	r3, [r2, #0]
                is_sound_detected = 1;
 8000dee:	4b5b      	ldr	r3, [pc, #364]	@ (8000f5c <main+0x234>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
                UART_SendString("[DETECT] Début du son\n");
 8000df4:	485b      	ldr	r0, [pc, #364]	@ (8000f64 <main+0x23c>)
 8000df6:	f000 f9e9 	bl	80011cc <UART_SendString>
                silence_f = __HAL_TIM_GET_COUNTER(&htim2);
 8000dfa:	4b54      	ldr	r3, [pc, #336]	@ (8000f4c <main+0x224>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e00:	4a59      	ldr	r2, [pc, #356]	@ (8000f68 <main+0x240>)
 8000e02:	6013      	str	r3, [r2, #0]
                UART_SendString(str);
                HAL_Delay(1);
            }
            */

            if (max_adc_value < THRESHOLD && is_sound_detected) {
 8000e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e06:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e0a:	d254      	bcs.n	8000eb6 <main+0x18e>
 8000e0c:	4b53      	ldr	r3, [pc, #332]	@ (8000f5c <main+0x234>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d050      	beq.n	8000eb6 <main+0x18e>
                silence_d = __HAL_TIM_GET_COUNTER(&htim2);
 8000e14:	4b4d      	ldr	r3, [pc, #308]	@ (8000f4c <main+0x224>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1a:	4a54      	ldr	r2, [pc, #336]	@ (8000f6c <main+0x244>)
 8000e1c:	6013      	str	r3, [r2, #0]
                silence_f = 0;
 8000e1e:	4b52      	ldr	r3, [pc, #328]	@ (8000f68 <main+0x240>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
                uint32_t sound_duration = (__HAL_TIM_GET_COUNTER(&htim2) - sound_start) * (1000.0 / 5250.0);
 8000e24:	4b49      	ldr	r3, [pc, #292]	@ (8000f4c <main+0x224>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f60 <main+0x238>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fcc1 	bl	80007b8 <__aeabi_ui2d>
 8000e36:	a342      	add	r3, pc, #264	@ (adr r3, 8000f40 <main+0x218>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fa50 	bl	80002e0 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fdb8 	bl	80009bc <__aeabi_d2uiz>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38

                char str[50];
                sprintf(str, "[INFO] Durée du son : %lu ms\r\n", sound_duration);
 8000e50:	463b      	mov	r3, r7
 8000e52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e54:	4946      	ldr	r1, [pc, #280]	@ (8000f70 <main+0x248>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 ff36 	bl	8003cc8 <siprintf>
                UART_SendString(str);
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f9b4 	bl	80011cc <UART_SendString>

                if (sound_duration < DOT_DURATION) {
 8000e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e6a:	d20c      	bcs.n	8000e86 <main+0x15e>
                    morse_code[morse_index] = '0';  // Représente un point
 8000e6c:	4b41      	ldr	r3, [pc, #260]	@ (8000f74 <main+0x24c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b41      	ldr	r3, [pc, #260]	@ (8000f78 <main+0x250>)
 8000e74:	2130      	movs	r1, #48	@ 0x30
 8000e76:	5499      	strb	r1, [r3, r2]
                    morse_index++;
 8000e78:	4b3e      	ldr	r3, [pc, #248]	@ (8000f74 <main+0x24c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b3c      	ldr	r3, [pc, #240]	@ (8000f74 <main+0x24c>)
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e00b      	b.n	8000e9e <main+0x176>
                } else {
                    morse_code[morse_index] = '1';  // Représente un tiret
 8000e86:	4b3b      	ldr	r3, [pc, #236]	@ (8000f74 <main+0x24c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f78 <main+0x250>)
 8000e8e:	2131      	movs	r1, #49	@ 0x31
 8000e90:	5499      	strb	r1, [r3, r2]
                    morse_index++;
 8000e92:	4b38      	ldr	r3, [pc, #224]	@ (8000f74 <main+0x24c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <main+0x24c>)
 8000e9c:	701a      	strb	r2, [r3, #0]
                }

                UART_SendString("[CODE] Séquence Morse : ");
 8000e9e:	4837      	ldr	r0, [pc, #220]	@ (8000f7c <main+0x254>)
 8000ea0:	f000 f994 	bl	80011cc <UART_SendString>
                UART_SendString(morse_code);
 8000ea4:	4834      	ldr	r0, [pc, #208]	@ (8000f78 <main+0x250>)
 8000ea6:	f000 f991 	bl	80011cc <UART_SendString>
                UART_SendString("\r\n");
 8000eaa:	4835      	ldr	r0, [pc, #212]	@ (8000f80 <main+0x258>)
 8000eac:	f000 f98e 	bl	80011cc <UART_SendString>

                is_sound_detected = 0;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <main+0x234>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
            }

            // Si un silence assez long est détecté, on suppose la fin d'un caractère
            if ((silence_f - silence_d) * (1000.0 / 5250.0) > 900 && silence_f != 0 && silence_d != 0){
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <main+0x240>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <main+0x244>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc79 	bl	80007b8 <__aeabi_ui2d>
 8000ec6:	a31e      	add	r3, pc, #120	@ (adr r3, 8000f40 <main+0x218>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fa08 	bl	80002e0 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <main+0x25c>)
 8000ede:	f7ff fd63 	bl	80009a8 <__aeabi_dcmpgt>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d073      	beq.n	8000fd0 <main+0x2a8>
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <main+0x240>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d06f      	beq.n	8000fd0 <main+0x2a8>
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <main+0x244>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d06b      	beq.n	8000fd0 <main+0x2a8>
                int ind = recherche_morse(morse_code);
 8000ef8:	481f      	ldr	r0, [pc, #124]	@ (8000f78 <main+0x250>)
 8000efa:	f000 f8b9 	bl	8001070 <recherche_morse>
 8000efe:	6378      	str	r0, [r7, #52]	@ 0x34
                if (ind != -1){
 8000f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f06:	d009      	beq.n	8000f1c <main+0x1f4>
                    texte[texte_index] = tabAlphabet[ind];
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <main+0x260>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f8c <main+0x264>)
 8000f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f12:	4413      	add	r3, r2
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <main+0x268>)
 8000f18:	545a      	strb	r2, [r3, r1]
 8000f1a:	e005      	b.n	8000f28 <main+0x200>
                } else {
                    texte[texte_index] = '?';
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <main+0x260>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <main+0x268>)
 8000f24:	213f      	movs	r1, #63	@ 0x3f
 8000f26:	5499      	strb	r1, [r3, r2]
                }
                texte_index++;
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <main+0x260>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <main+0x260>)
 8000f32:	701a      	strb	r2, [r3, #0]

                // Réinitialisation de la séquence Morse
                for (int k = 0 ; k < 7 ; k++){
 8000f34:	2300      	movs	r3, #0
 8000f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f38:	e034      	b.n	8000fa4 <main+0x27c>
 8000f3a:	bf00      	nop
 8000f3c:	f3af 8000 	nop.w
 8000f40:	18618618 	.word	0x18618618
 8000f44:	3fc86186 	.word	0x3fc86186
 8000f48:	2000012c 	.word	0x2000012c
 8000f4c:	20000174 	.word	0x20000174
 8000f50:	200002dc 	.word	0x200002dc
 8000f54:	200002e0 	.word	0x200002e0
 8000f58:	40490000 	.word	0x40490000
 8000f5c:	200002e4 	.word	0x200002e4
 8000f60:	200002d0 	.word	0x200002d0
 8000f64:	08004708 	.word	0x08004708
 8000f68:	200002d8 	.word	0x200002d8
 8000f6c:	200002d4 	.word	0x200002d4
 8000f70:	08004720 	.word	0x08004720
 8000f74:	200002cd 	.word	0x200002cd
 8000f78:	20000204 	.word	0x20000204
 8000f7c:	08004740 	.word	0x08004740
 8000f80:	0800475c 	.word	0x0800475c
 8000f84:	408c2000 	.word	0x408c2000
 8000f88:	200002cc 	.word	0x200002cc
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000268 	.word	0x20000268
                    morse_code[k] = '\0';
 8000f94:	4a2e      	ldr	r2, [pc, #184]	@ (8001050 <main+0x328>)
 8000f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f98:	4413      	add	r3, r2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
                for (int k = 0 ; k < 7 ; k++){
 8000f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	ddf4      	ble.n	8000f94 <main+0x26c>
                }
                morse_index = 0;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <main+0x32c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]

                UART_SendString("[TEXTE] Lettre détectée : ");
 8000fb0:	4829      	ldr	r0, [pc, #164]	@ (8001058 <main+0x330>)
 8000fb2:	f000 f90b 	bl	80011cc <UART_SendString>
                UART_SendString(texte);
 8000fb6:	4829      	ldr	r0, [pc, #164]	@ (800105c <main+0x334>)
 8000fb8:	f000 f908 	bl	80011cc <UART_SendString>
                UART_SendString("\r\n");
 8000fbc:	4828      	ldr	r0, [pc, #160]	@ (8001060 <main+0x338>)
 8000fbe:	f000 f905 	bl	80011cc <UART_SendString>

                silence_f = silence_d = 0;
 8000fc2:	4b28      	ldr	r3, [pc, #160]	@ (8001064 <main+0x33c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <main+0x33c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a26      	ldr	r2, [pc, #152]	@ (8001068 <main+0x340>)
 8000fce:	6013      	str	r3, [r2, #0]
            }

            // Si le silence est encore plus long, on considère un espace entre mots
            if ((silence_f - silence_d) * (1000.0 / 5250.0) > 1900 && silence_f != 0 && silence_d != 0){
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <main+0x340>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <main+0x33c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fbec 	bl	80007b8 <__aeabi_ui2d>
 8000fe0:	a317      	add	r3, pc, #92	@ (adr r3, 8001040 <main+0x318>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff f97b 	bl	80002e0 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	a315      	add	r3, pc, #84	@ (adr r3, 8001048 <main+0x320>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fcd6 	bl	80009a8 <__aeabi_dcmpgt>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01c      	beq.n	800103c <main+0x314>
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <main+0x340>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f43f aea3 	beq.w	8000d52 <main+0x2a>
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <main+0x33c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	f43f ae9e 	beq.w	8000d52 <main+0x2a>
                texte[texte_index] = '_';
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <main+0x344>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <main+0x334>)
 800101e:	215f      	movs	r1, #95	@ 0x5f
 8001020:	5499      	strb	r1, [r3, r2]
                texte_index++;
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <main+0x344>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <main+0x344>)
 800102c:	701a      	strb	r2, [r3, #0]
                silence_f = silence_d = 0;
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <main+0x33c>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <main+0x33c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <main+0x340>)
 800103a:	6013      	str	r3, [r2, #0]
        if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800103c:	e689      	b.n	8000d52 <main+0x2a>
 800103e:	bf00      	nop
 8001040:	18618618 	.word	0x18618618
 8001044:	3fc86186 	.word	0x3fc86186
 8001048:	00000000 	.word	0x00000000
 800104c:	409db000 	.word	0x409db000
 8001050:	20000204 	.word	0x20000204
 8001054:	200002cd 	.word	0x200002cd
 8001058:	08004760 	.word	0x08004760
 800105c:	20000268 	.word	0x20000268
 8001060:	0800475c 	.word	0x0800475c
 8001064:	200002d4 	.word	0x200002d4
 8001068:	200002d8 	.word	0x200002d8
 800106c:	200002cc 	.word	0x200002cc

08001070 <recherche_morse>:
    }
}



int recherche_morse(char *str){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	int index = -1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	60fb      	str	r3, [r7, #12]
	int i = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
	while (index == -1 && i < 36){
 8001082:	e00f      	b.n	80010a4 <recherche_morse+0x34>
		if (strcmp(codeMorse[i], str) == 0){
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <recherche_morse+0x4c>)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f8be 	bl	8000210 <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <recherche_morse+0x2e>
			index = i;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	60fb      	str	r3, [r7, #12]
		}
		i++;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
	while (index == -1 && i < 36){
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010aa:	d102      	bne.n	80010b2 <recherche_morse+0x42>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b23      	cmp	r3, #35	@ 0x23
 80010b0:	dde8      	ble.n	8001084 <recherche_morse+0x14>
	}
	return index;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000024 	.word	0x20000024

080010c0 <MX_ADC1_Init>:



/* Configuration de l'ADC */
void MX_ADC1_Init(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

    hadc1.Instance = ADC1;
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_ADC1_Init+0x70>)
 80010d4:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <MX_ADC1_Init+0x74>)
 80010d6:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_ADC1_Init+0x70>)
 80010da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010de:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_ADC1_Init+0x70>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_ADC1_Init+0x70>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_ADC1_Init+0x70>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_ADC1_Init+0x70>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <MX_ADC1_Init+0x70>)
 80010fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <MX_ADC1_Init+0x78>)
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_ADC1_Init+0x70>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_ADC1_Init+0x70>)
 8001108:	2201      	movs	r2, #1
 800110a:	61da      	str	r2, [r3, #28]
    HAL_ADC_Init(&hadc1);
 800110c:	4808      	ldr	r0, [pc, #32]	@ (8001130 <MX_ADC1_Init+0x70>)
 800110e:	f000 fac3 	bl	8001698 <HAL_ADC_Init>

    sConfig.Channel = ADC_CHANNEL_0;
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800111a:	2301      	movs	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4803      	ldr	r0, [pc, #12]	@ (8001130 <MX_ADC1_Init+0x70>)
 8001124:	f000 fc66 	bl	80019f4 <HAL_ADC_ConfigChannel>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000012c 	.word	0x2000012c
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <MX_TIM2_Init>:

/* Configuration du Timer TIM2 */
void MX_TIM2_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_TIM2_Init+0x44>)
 8001142:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001146:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16000 - 1;  // 16MHz / 16k = 1kHz (1ms)
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_TIM2_Init+0x44>)
 800114a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800114e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_TIM2_Init+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF;  // Interruption toutes les 10ms
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_TIM2_Init+0x44>)
 8001158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <MX_TIM2_Init+0x44>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim2);
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <MX_TIM2_Init+0x44>)
 8001166:	f001 ff01 	bl	8002f6c <HAL_TIM_Base_Init>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	201c      	movs	r0, #28
 8001170:	f000 ff49 	bl	8002006 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001174:	201c      	movs	r0, #28
 8001176:	f000 ff62 	bl	800203e <HAL_NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000174 	.word	0x20000174

08001184 <MX_USART2_UART_Init>:

/* Configuration de l'UART */
void MX_USART2_UART_Init(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 800118a:	4a0f      	ldr	r2, [pc, #60]	@ (80011c8 <MX_USART2_UART_Init+0x44>)
 800118c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 80011ba:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <MX_USART2_UART_Init+0x40>)
 80011bc:	f002 f978 	bl	80034b0 <HAL_UART_Init>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001bc 	.word	0x200001bc
 80011c8:	40004400 	.word	0x40004400

080011cc <UART_SendString>:

/* Fonction pour envoyer une chaîne via UART */
void UART_SendString(char *str) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff f825 	bl	8000224 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <UART_SendString+0x28>)
 80011e6:	f002 f9b3 	bl	8003550 <HAL_UART_Transmit>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001bc 	.word	0x200001bc

080011f8 <SystemClock_Config>:

/* Configuration de l'horloge */
void SystemClock_Config(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b092      	sub	sp, #72	@ 0x48
 80011fc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2234      	movs	r2, #52	@ 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f002 fd80 	bl	8003d0c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121a:	2302      	movs	r3, #2
 800121c:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001222:	2310      	movs	r3, #16
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLM = 16;
 800122e:	2310      	movs	r3, #16
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001232:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001236:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001238:	2304      	movs	r3, #4
 800123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800123c:	2307      	movs	r3, #7
 800123e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fbf3 	bl	8002a30 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	603b      	str	r3, [r7, #0]
                                    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001260:	463b      	mov	r3, r7
 8001262:	2102      	movs	r1, #2
 8001264:	4618      	mov	r0, r3
 8001266:	f001 f899 	bl	800239c <HAL_RCC_ClockConfig>
}
 800126a:	bf00      	nop
 800126c:	3748      	adds	r7, #72	@ 0x48
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_GPIO_Init>:

/* Configuration des GPIO */
static void MX_GPIO_Init(void) {
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_GPIO_Init+0x30>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <MX_GPIO_Init+0x30>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_GPIO_Init+0x30>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e6:	2007      	movs	r0, #7
 80012e8:	f000 fe82 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a17      	ldr	r2, [pc, #92]	@ (8001374 <HAL_ADC_MspInit+0x7c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d127      	bne.n	800136a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_ADC_MspInit+0x80>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a15      	ldr	r2, [pc, #84]	@ (8001378 <HAL_ADC_MspInit+0x80>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <HAL_ADC_MspInit+0x80>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_ADC_MspInit+0x80>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <HAL_ADC_MspInit+0x80>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_ADC_MspInit+0x80>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001352:	2301      	movs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <HAL_ADC_MspInit+0x84>)
 8001366:	f000 fe85 	bl	8002074 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012000 	.word	0x40012000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001390:	d115      	bne.n	80013be <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201c      	movs	r0, #28
 80013b4:	f000 fe27 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f000 fe40 	bl	800203e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_UART_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_UART_MspInit+0x88>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_UART_MspInit+0x88>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001426:	230c      	movs	r3, #12
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001436:	2307      	movs	r3, #7
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <HAL_UART_MspInit+0x8c>)
 8001442:	f000 fe17 	bl	8002074 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40004400 	.word	0x40004400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f8d1 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <TIM2_IRQHandler+0x10>)
 80014c2:	f001 fe13 	bl	80030ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000174 	.word	0x20000174

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f002 fc0c 	bl	8003d1c <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20020000 	.word	0x20020000
 8001530:	00000400 	.word	0x00000400
 8001534:	200002e8 	.word	0x200002e8
 8001538:	20000438 	.word	0x20000438

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001564:	f7ff ffea 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800158e:	f002 fbcb 	bl	8003d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fbc9 	bl	8000d28 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80015a4:	080047dc 	.word	0x080047dc
  ldr r2, =_sbss
 80015a8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80015ac:	20000438 	.word	0x20000438

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 fd07 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fe5e 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fd1f 	bl	800205a <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 fce7 	bl	8002006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200000b4 	.word	0x200000b4
 8001650:	200000bc 	.word	0x200000bc
 8001654:	200000b8 	.word	0x200000b8

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200000bc 	.word	0x200000bc
 800167c:	200002ec 	.word	0x200002ec

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200002ec 	.word	0x200002ec

08001698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e033      	b.n	8001716 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fe1e 	bl	80012f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016de:	f023 0302 	bic.w	r3, r3, #2
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fab4 	bl	8001c58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40
 8001706:	e001      	b.n	800170c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_Start+0x1a>
 8001736:	2302      	movs	r3, #2
 8001738:	e0b2      	b.n	80018a0 <HAL_ADC_Start+0x180>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d018      	beq.n	8001782 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001760:	4b52      	ldr	r3, [pc, #328]	@ (80018ac <HAL_ADC_Start+0x18c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a52      	ldr	r2, [pc, #328]	@ (80018b0 <HAL_ADC_Start+0x190>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9a      	lsrs	r2, r3, #18
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d17a      	bne.n	8001886 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017ce:	d106      	bne.n	80017de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d4:	f023 0206 	bic.w	r2, r3, #6
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	645a      	str	r2, [r3, #68]	@ 0x44
 80017dc:	e002      	b.n	80017e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ec:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <HAL_ADC_Start+0x194>)
 80017ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	2b00      	cmp	r3, #0
 8001804:	d12a      	bne.n	800185c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2b      	ldr	r2, [pc, #172]	@ (80018b8 <HAL_ADC_Start+0x198>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d015      	beq.n	800183c <HAL_ADC_Start+0x11c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a29      	ldr	r2, [pc, #164]	@ (80018bc <HAL_ADC_Start+0x19c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d105      	bne.n	8001826 <HAL_ADC_Start+0x106>
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_ADC_Start+0x194>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <HAL_ADC_Start+0x1a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d136      	bne.n	800189e <HAL_ADC_Start+0x17e>
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_ADC_Start+0x194>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d130      	bne.n	800189e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d129      	bne.n	800189e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e020      	b.n	800189e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a15      	ldr	r2, [pc, #84]	@ (80018b8 <HAL_ADC_Start+0x198>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d11b      	bne.n	800189e <HAL_ADC_Start+0x17e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d114      	bne.n	800189e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e00b      	b.n	800189e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f043 0210 	orr.w	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	200000b4 	.word	0x200000b4
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	40012300 	.word	0x40012300
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40012100 	.word	0x40012100
 80018c0:	40012200 	.word	0x40012200

080018c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e0:	d113      	bne.n	800190a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018f0:	d10b      	bne.n	800190a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e063      	b.n	80019d2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800190a:	f7ff feb9 	bl	8001680 <HAL_GetTick>
 800190e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001910:	e021      	b.n	8001956 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d01d      	beq.n	8001956 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_ADC_PollForConversion+0x6c>
 8001920:	f7ff feae 	bl	8001680 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d212      	bcs.n	8001956 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b02      	cmp	r3, #2
 800193c:	d00b      	beq.n	8001956 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f043 0204 	orr.w	r2, r3, #4
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e03d      	b.n	80019d2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b02      	cmp	r3, #2
 8001962:	d1d6      	bne.n	8001912 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0212 	mvn.w	r2, #18
 800196c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d123      	bne.n	80019d0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800198c:	2b00      	cmp	r3, #0
 800198e:	d11f      	bne.n	80019d0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001996:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d111      	bne.n	80019d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1c>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e113      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x244>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	d925      	bls.n	8001a6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68d9      	ldr	r1, [r3, #12]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	3b1e      	subs	r3, #30
 8001a36:	2207      	movs	r2, #7
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68d9      	ldr	r1, [r3, #12]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	4603      	mov	r3, r0
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4403      	add	r3, r0
 8001a5e:	3b1e      	subs	r3, #30
 8001a60:	409a      	lsls	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	e022      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6919      	ldr	r1, [r3, #16]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	2207      	movs	r2, #7
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6919      	ldr	r1, [r3, #16]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4403      	add	r3, r0
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d824      	bhi.n	8001b04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b05      	subs	r3, #5
 8001acc:	221f      	movs	r2, #31
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b05      	subs	r3, #5
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b02:	e04c      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d824      	bhi.n	8001b56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b23      	subs	r3, #35	@ 0x23
 8001b1e:	221f      	movs	r2, #31
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43da      	mvns	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b23      	subs	r3, #35	@ 0x23
 8001b48:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b54:	e023      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b41      	subs	r3, #65	@ 0x41
 8001b68:	221f      	movs	r2, #31
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	400a      	ands	r2, r1
 8001b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b41      	subs	r3, #65	@ 0x41
 8001b92:	fa00 f203 	lsl.w	r2, r0, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <HAL_ADC_ConfigChannel+0x250>)
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <HAL_ADC_ConfigChannel+0x254>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d10f      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1d8>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d10b      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c48 <HAL_ADC_ConfigChannel+0x254>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12b      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x23a>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1c      	ldr	r2, [pc, #112]	@ (8001c4c <HAL_ADC_ConfigChannel+0x258>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d003      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x1f4>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b11      	cmp	r3, #17
 8001be6:	d122      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_ADC_ConfigChannel+0x258>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d111      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_ADC_ConfigChannel+0x25c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a11      	ldr	r2, [pc, #68]	@ (8001c54 <HAL_ADC_ConfigChannel+0x260>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9a      	lsrs	r2, r3, #18
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40012300 	.word	0x40012300
 8001c48:	40012000 	.word	0x40012000
 8001c4c:	10000012 	.word	0x10000012
 8001c50:	200000b4 	.word	0x200000b4
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c60:	4b79      	ldr	r3, [pc, #484]	@ (8001e48 <ADC_Init+0x1f0>)
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	021a      	lsls	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6899      	ldr	r1, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	4a58      	ldr	r2, [pc, #352]	@ (8001e4c <ADC_Init+0x1f4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d022      	beq.n	8001d36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6899      	ldr	r1, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6899      	ldr	r1, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e00f      	b.n	8001d56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0202 	bic.w	r2, r2, #2
 8001d64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7e1b      	ldrb	r3, [r3, #24]
 8001d70:	005a      	lsls	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001da2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	3b01      	subs	r3, #1
 8001db0:	035a      	lsls	r2, r3, #13
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	e007      	b.n	8001dcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	051a      	lsls	r2, r3, #20
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e0e:	025a      	lsls	r2, r3, #9
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6899      	ldr	r1, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	029a      	lsls	r2, r3, #10
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	609a      	str	r2, [r3, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40012300 	.word	0x40012300
 8001e4c:	0f000001 	.word	0x0f000001

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4907      	ldr	r1, [pc, #28]	@ (8001eec <__NVIC_EnableIRQ+0x38>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	@ (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	@ (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	@ 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	@ 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff29 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff3e 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff31 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa2 	bl	8001fac <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	@ 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e165      	b.n	800235c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8154 	bne.w	8002356 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80ae 	beq.w	8002356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002374 <HAL_GPIO_Init+0x300>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	4a5c      	ldr	r2, [pc, #368]	@ (8002374 <HAL_GPIO_Init+0x300>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002208:	6453      	str	r3, [r2, #68]	@ 0x44
 800220a:	4b5a      	ldr	r3, [pc, #360]	@ (8002374 <HAL_GPIO_Init+0x300>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a58      	ldr	r2, [pc, #352]	@ (8002378 <HAL_GPIO_Init+0x304>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4f      	ldr	r2, [pc, #316]	@ (800237c <HAL_GPIO_Init+0x308>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d025      	beq.n	800228e <HAL_GPIO_Init+0x21a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4e      	ldr	r2, [pc, #312]	@ (8002380 <HAL_GPIO_Init+0x30c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x216>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4d      	ldr	r2, [pc, #308]	@ (8002384 <HAL_GPIO_Init+0x310>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x212>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4c      	ldr	r2, [pc, #304]	@ (8002388 <HAL_GPIO_Init+0x314>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x20e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4b      	ldr	r2, [pc, #300]	@ (800238c <HAL_GPIO_Init+0x318>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x20a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4a      	ldr	r2, [pc, #296]	@ (8002390 <HAL_GPIO_Init+0x31c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x206>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a49      	ldr	r2, [pc, #292]	@ (8002394 <HAL_GPIO_Init+0x320>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x202>
 8002272:	2306      	movs	r3, #6
 8002274:	e00c      	b.n	8002290 <HAL_GPIO_Init+0x21c>
 8002276:	2307      	movs	r3, #7
 8002278:	e00a      	b.n	8002290 <HAL_GPIO_Init+0x21c>
 800227a:	2305      	movs	r3, #5
 800227c:	e008      	b.n	8002290 <HAL_GPIO_Init+0x21c>
 800227e:	2304      	movs	r3, #4
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x21c>
 8002282:	2303      	movs	r3, #3
 8002284:	e004      	b.n	8002290 <HAL_GPIO_Init+0x21c>
 8002286:	2302      	movs	r3, #2
 8002288:	e002      	b.n	8002290 <HAL_GPIO_Init+0x21c>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_GPIO_Init+0x21c>
 800228e:	2300      	movs	r3, #0
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	f002 0203 	and.w	r2, r2, #3
 8002296:	0092      	lsls	r2, r2, #2
 8002298:	4093      	lsls	r3, r2
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a0:	4935      	ldr	r1, [pc, #212]	@ (8002378 <HAL_GPIO_Init+0x304>)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002398 <HAL_GPIO_Init+0x324>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d2:	4a31      	ldr	r2, [pc, #196]	@ (8002398 <HAL_GPIO_Init+0x324>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002398 <HAL_GPIO_Init+0x324>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022fc:	4a26      	ldr	r2, [pc, #152]	@ (8002398 <HAL_GPIO_Init+0x324>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002302:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_GPIO_Init+0x324>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002326:	4a1c      	ldr	r2, [pc, #112]	@ (8002398 <HAL_GPIO_Init+0x324>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800232c:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <HAL_GPIO_Init+0x324>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002350:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_GPIO_Init+0x324>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3301      	adds	r3, #1
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	f67f ae96 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	40013800 	.word	0x40013800
 800237c:	40020000 	.word	0x40020000
 8002380:	40020400 	.word	0x40020400
 8002384:	40020800 	.word	0x40020800
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40021000 	.word	0x40021000
 8002390:	40021400 	.word	0x40021400
 8002394:	40021800 	.word	0x40021800
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0cc      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b68      	ldr	r3, [pc, #416]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d90c      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b65      	ldr	r3, [pc, #404]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b63      	ldr	r3, [pc, #396]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b8      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	4b59      	ldr	r3, [pc, #356]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002408:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a52      	ldr	r2, [pc, #328]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	494d      	ldr	r1, [pc, #308]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d044      	beq.n	80024bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d119      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e07f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d003      	beq.n	800245a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	2b03      	cmp	r3, #3
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b3f      	ldr	r3, [pc, #252]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e067      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4934      	ldr	r1, [pc, #208]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7ff f8f8 	bl	8001680 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7ff f8f4 	bl	8001680 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e04f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d20c      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e032      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4916      	ldr	r1, [pc, #88]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	490e      	ldr	r1, [pc, #56]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002522:	f000 f855 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002526:	4602      	mov	r2, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	490a      	ldr	r1, [pc, #40]	@ (800255c <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	5ccb      	ldrb	r3, [r1, r3]
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a09      	ldr	r2, [pc, #36]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f858 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00
 8002558:	40023800 	.word	0x40023800
 800255c:	08004780 	.word	0x08004780
 8002560:	200000b4 	.word	0x200000b4
 8002564:	200000b8 	.word	0x200000b8

08002568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_RCC_GetHCLKFreq+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	200000b4 	.word	0x200000b4

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002584:	f7ff fff0 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0a9b      	lsrs	r3, r3, #10
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4903      	ldr	r1, [pc, #12]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800
 80025a4:	08004790 	.word	0x08004790

080025a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ac:	f7ff ffdc 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	0b5b      	lsrs	r3, r3, #13
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4903      	ldr	r1, [pc, #12]	@ (80025cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08004790 	.word	0x08004790

080025d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d4:	b0ae      	sub	sp, #184	@ 0xb8
 80025d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f6:	4bcb      	ldr	r3, [pc, #812]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	f200 8206 	bhi.w	8002a10 <HAL_RCC_GetSysClockFreq+0x440>
 8002604:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	08002641 	.word	0x08002641
 8002610:	08002a11 	.word	0x08002a11
 8002614:	08002a11 	.word	0x08002a11
 8002618:	08002a11 	.word	0x08002a11
 800261c:	08002649 	.word	0x08002649
 8002620:	08002a11 	.word	0x08002a11
 8002624:	08002a11 	.word	0x08002a11
 8002628:	08002a11 	.word	0x08002a11
 800262c:	08002651 	.word	0x08002651
 8002630:	08002a11 	.word	0x08002a11
 8002634:	08002a11 	.word	0x08002a11
 8002638:	08002a11 	.word	0x08002a11
 800263c:	08002841 	.word	0x08002841
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4bb9      	ldr	r3, [pc, #740]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x358>)
 8002642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002646:	e1e7      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002648:	4bb8      	ldr	r3, [pc, #736]	@ (800292c <HAL_RCC_GetSysClockFreq+0x35c>)
 800264a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800264e:	e1e3      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4bb4      	ldr	r3, [pc, #720]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265c:	4bb1      	ldr	r3, [pc, #708]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d071      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002668:	4bae      	ldr	r3, [pc, #696]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002674:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002678:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800267c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002680:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800268a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800268e:	4622      	mov	r2, r4
 8002690:	462b      	mov	r3, r5
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	0159      	lsls	r1, r3, #5
 800269c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a0:	0150      	lsls	r0, r2, #5
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4621      	mov	r1, r4
 80026a8:	1a51      	subs	r1, r2, r1
 80026aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80026ac:	4629      	mov	r1, r5
 80026ae:	eb63 0301 	sbc.w	r3, r3, r1
 80026b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026c0:	4649      	mov	r1, r9
 80026c2:	018b      	lsls	r3, r1, #6
 80026c4:	4641      	mov	r1, r8
 80026c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ca:	4641      	mov	r1, r8
 80026cc:	018a      	lsls	r2, r1, #6
 80026ce:	4641      	mov	r1, r8
 80026d0:	1a51      	subs	r1, r2, r1
 80026d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026d4:	4649      	mov	r1, r9
 80026d6:	eb63 0301 	sbc.w	r3, r3, r1
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026e8:	4649      	mov	r1, r9
 80026ea:	00cb      	lsls	r3, r1, #3
 80026ec:	4641      	mov	r1, r8
 80026ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f2:	4641      	mov	r1, r8
 80026f4:	00ca      	lsls	r2, r1, #3
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	4622      	mov	r2, r4
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
 8002702:	462b      	mov	r3, r5
 8002704:	460a      	mov	r2, r1
 8002706:	eb42 0303 	adc.w	r3, r2, r3
 800270a:	637b      	str	r3, [r7, #52]	@ 0x34
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002718:	4629      	mov	r1, r5
 800271a:	024b      	lsls	r3, r1, #9
 800271c:	4621      	mov	r1, r4
 800271e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002722:	4621      	mov	r1, r4
 8002724:	024a      	lsls	r2, r1, #9
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800272e:	2200      	movs	r2, #0
 8002730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002734:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002738:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800273c:	f7fe f95e 	bl	80009fc <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4613      	mov	r3, r2
 8002746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800274a:	e067      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b75      	ldr	r3, [pc, #468]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	2200      	movs	r2, #0
 8002754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002758:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800275c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002764:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002766:	2300      	movs	r3, #0
 8002768:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800276a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800276e:	4622      	mov	r2, r4
 8002770:	462b      	mov	r3, r5
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002780:	0150      	lsls	r0, r2, #5
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4621      	mov	r1, r4
 8002788:	1a51      	subs	r1, r2, r1
 800278a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800278c:	4629      	mov	r1, r5
 800278e:	eb63 0301 	sbc.w	r3, r3, r1
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027a0:	4649      	mov	r1, r9
 80027a2:	018b      	lsls	r3, r1, #6
 80027a4:	4641      	mov	r1, r8
 80027a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027aa:	4641      	mov	r1, r8
 80027ac:	018a      	lsls	r2, r1, #6
 80027ae:	4641      	mov	r1, r8
 80027b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80027b4:	4649      	mov	r1, r9
 80027b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ce:	4692      	mov	sl, r2
 80027d0:	469b      	mov	fp, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	eb1a 0303 	adds.w	r3, sl, r3
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	462b      	mov	r3, r5
 80027dc:	eb4b 0303 	adc.w	r3, fp, r3
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027ee:	4629      	mov	r1, r5
 80027f0:	028b      	lsls	r3, r1, #10
 80027f2:	4621      	mov	r1, r4
 80027f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f8:	4621      	mov	r1, r4
 80027fa:	028a      	lsls	r2, r1, #10
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002804:	2200      	movs	r2, #0
 8002806:	673b      	str	r3, [r7, #112]	@ 0x70
 8002808:	677a      	str	r2, [r7, #116]	@ 0x74
 800280a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800280e:	f7fe f8f5 	bl	80009fc <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4613      	mov	r3, r2
 8002818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800281c:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800282e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800283e:	e0eb      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002840:	4b38      	ldr	r3, [pc, #224]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284c:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d06b      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x354>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286a:	663b      	str	r3, [r7, #96]	@ 0x60
 800286c:	2300      	movs	r3, #0
 800286e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002870:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002874:	4622      	mov	r2, r4
 8002876:	462b      	mov	r3, r5
 8002878:	f04f 0000 	mov.w	r0, #0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002886:	0150      	lsls	r0, r2, #5
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4621      	mov	r1, r4
 800288e:	1a51      	subs	r1, r2, r1
 8002890:	61b9      	str	r1, [r7, #24]
 8002892:	4629      	mov	r1, r5
 8002894:	eb63 0301 	sbc.w	r3, r3, r1
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028a6:	4659      	mov	r1, fp
 80028a8:	018b      	lsls	r3, r1, #6
 80028aa:	4651      	mov	r1, sl
 80028ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b0:	4651      	mov	r1, sl
 80028b2:	018a      	lsls	r2, r1, #6
 80028b4:	4651      	mov	r1, sl
 80028b6:	ebb2 0801 	subs.w	r8, r2, r1
 80028ba:	4659      	mov	r1, fp
 80028bc:	eb63 0901 	sbc.w	r9, r3, r1
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d4:	4690      	mov	r8, r2
 80028d6:	4699      	mov	r9, r3
 80028d8:	4623      	mov	r3, r4
 80028da:	eb18 0303 	adds.w	r3, r8, r3
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	462b      	mov	r3, r5
 80028e2:	eb49 0303 	adc.w	r3, r9, r3
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028f4:	4629      	mov	r1, r5
 80028f6:	024b      	lsls	r3, r1, #9
 80028f8:	4621      	mov	r1, r4
 80028fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028fe:	4621      	mov	r1, r4
 8002900:	024a      	lsls	r2, r1, #9
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800290a:	2200      	movs	r2, #0
 800290c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800290e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002910:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002914:	f7fe f872 	bl	80009fc <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4613      	mov	r3, r2
 800291e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002922:	e065      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x420>
 8002924:	40023800 	.word	0x40023800
 8002928:	00f42400 	.word	0x00f42400
 800292c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002930:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x458>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	2200      	movs	r2, #0
 8002938:	4618      	mov	r0, r3
 800293a:	4611      	mov	r1, r2
 800293c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002940:	653b      	str	r3, [r7, #80]	@ 0x50
 8002942:	2300      	movs	r3, #0
 8002944:	657b      	str	r3, [r7, #84]	@ 0x54
 8002946:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800294a:	4642      	mov	r2, r8
 800294c:	464b      	mov	r3, r9
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	0159      	lsls	r1, r3, #5
 8002958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295c:	0150      	lsls	r0, r2, #5
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4641      	mov	r1, r8
 8002964:	1a51      	subs	r1, r2, r1
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	4649      	mov	r1, r9
 800296a:	eb63 0301 	sbc.w	r3, r3, r1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800297c:	4659      	mov	r1, fp
 800297e:	018b      	lsls	r3, r1, #6
 8002980:	4651      	mov	r1, sl
 8002982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002986:	4651      	mov	r1, sl
 8002988:	018a      	lsls	r2, r1, #6
 800298a:	4651      	mov	r1, sl
 800298c:	1a54      	subs	r4, r2, r1
 800298e:	4659      	mov	r1, fp
 8002990:	eb63 0501 	sbc.w	r5, r3, r1
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	464b      	mov	r3, r9
 80029b0:	eb45 0303 	adc.w	r3, r5, r3
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029d8:	2200      	movs	r2, #0
 80029da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029e2:	f7fe f80b 	bl	80009fc <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4613      	mov	r3, r2
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x458>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0f1b      	lsrs	r3, r3, #28
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80029fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a0e:	e003      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	37b8      	adds	r7, #184	@ 0xb8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	00f42400 	.word	0x00f42400

08002a30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e28d      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8083 	beq.w	8002b56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a50:	4b94      	ldr	r3, [pc, #592]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d019      	beq.n	8002a90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a5c:	4b91      	ldr	r3, [pc, #580]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a68:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a76:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4b88      	ldr	r3, [pc, #544]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4b84      	ldr	r3, [pc, #528]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x124>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e25a      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x90>
 8002ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xcc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xb4>
 8002aca:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a75      	ldr	r2, [pc, #468]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b73      	ldr	r3, [pc, #460]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a72      	ldr	r2, [pc, #456]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xcc>
 8002ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fdbc 	bl	8001680 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fdb8 	bl	8001680 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e21f      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xdc>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fda8 	bl	8001680 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe fda4 	bl	8001680 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e20b      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b57      	ldr	r3, [pc, #348]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x104>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d06f      	beq.n	8002c42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b62:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d017      	beq.n	8002b9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d105      	bne.n	8002b86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d11c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b92:	4b44      	ldr	r3, [pc, #272]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x186>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1d3      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4937      	ldr	r1, [pc, #220]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	e03a      	b.n	8002c42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd4:	4b34      	ldr	r3, [pc, #208]	@ (8002ca8 <HAL_RCC_OscConfig+0x278>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe fd51 	bl	8001680 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fd4d 	bl	8001680 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e1b4      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4925      	ldr	r1, [pc, #148]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c16:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_RCC_OscConfig+0x278>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fd30 	bl	8001680 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c24:	f7fe fd2c 	bl	8001680 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e193      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d036      	beq.n	8002cbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_RCC_OscConfig+0x27c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fd10 	bl	8001680 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe fd0c 	bl	8001680 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e173      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x234>
 8002c82:	e01b      	b.n	8002cbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <HAL_RCC_OscConfig+0x27c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fcf9 	bl	8001680 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	e00e      	b.n	8002cb0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7fe fcf5 	bl	8001680 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d907      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e15c      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	42470000 	.word	0x42470000
 8002cac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4b8a      	ldr	r3, [pc, #552]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ea      	bne.n	8002c92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8097 	beq.w	8002df8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cce:	4b83      	ldr	r3, [pc, #524]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	4b7f      	ldr	r3, [pc, #508]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cea:	4b7c      	ldr	r3, [pc, #496]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b79      	ldr	r3, [pc, #484]	@ (8002ee0 <HAL_RCC_OscConfig+0x4b0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d118      	bne.n	8002d38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d06:	4b76      	ldr	r3, [pc, #472]	@ (8002ee0 <HAL_RCC_OscConfig+0x4b0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a75      	ldr	r2, [pc, #468]	@ (8002ee0 <HAL_RCC_OscConfig+0x4b0>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d12:	f7fe fcb5 	bl	8001680 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1a:	f7fe fcb1 	bl	8001680 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e118      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee0 <HAL_RCC_OscConfig+0x4b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x31e>
 8002d40:	4b66      	ldr	r3, [pc, #408]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4a65      	ldr	r2, [pc, #404]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCC_OscConfig+0x358>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x340>
 8002d56:	4b61      	ldr	r3, [pc, #388]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	4a60      	ldr	r2, [pc, #384]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d62:	4b5e      	ldr	r3, [pc, #376]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d66:	4a5d      	ldr	r2, [pc, #372]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0x358>
 8002d70:	4b5a      	ldr	r3, [pc, #360]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d74:	4a59      	ldr	r2, [pc, #356]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d7c:	4b57      	ldr	r3, [pc, #348]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d80:	4a56      	ldr	r2, [pc, #344]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	f023 0304 	bic.w	r3, r3, #4
 8002d86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d015      	beq.n	8002dbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe fc76 	bl	8001680 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7fe fc72 	bl	8001680 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0d7      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	4b4b      	ldr	r3, [pc, #300]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0ee      	beq.n	8002d98 <HAL_RCC_OscConfig+0x368>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fc60 	bl	8001680 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fc5c 	bl	8001680 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0c1      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dda:	4b40      	ldr	r3, [pc, #256]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ee      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dec:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	4a3a      	ldr	r2, [pc, #232]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80ad 	beq.w	8002f5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e02:	4b36      	ldr	r3, [pc, #216]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d060      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d145      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b33      	ldr	r3, [pc, #204]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fc30 	bl	8001680 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe fc2c 	bl	8001680 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e093      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	019b      	lsls	r3, r3, #6
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	071b      	lsls	r3, r3, #28
 8002e6e:	491b      	ldr	r1, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b4>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fc01 	bl	8001680 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fbfd 	bl	8001680 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e064      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x452>
 8002ea0:	e05c      	b.n	8002f5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b4>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fbea 	bl	8001680 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe fbe6 	bl	8001680 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e04d      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x480>
 8002ece:	e045      	b.n	8002f5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e040      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f68 <HAL_RCC_OscConfig+0x538>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d030      	beq.n	8002f58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d129      	bne.n	8002f58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d122      	bne.n	8002f58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d119      	bne.n	8002f58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d10f      	bne.n	8002f58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e041      	b.n	8003002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe f9f4 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 f9c0 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d001      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e04e      	b.n	80030c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x80>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304e:	d01d      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x80>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x80>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1e      	ldr	r2, [pc, #120]	@ (80030d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x80>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <HAL_TIM_Base_Start_IT+0xd0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x80>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1b      	ldr	r2, [pc, #108]	@ (80030e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x80>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x80>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d111      	bne.n	80030b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d010      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	e007      	b.n	80030c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40010400 	.word	0x40010400
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40001800 	.word	0x40001800

080030ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d020      	beq.n	8003150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0202 	mvn.w	r2, #2
 8003120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8dc 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8ce 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f8df 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d020      	beq.n	800319c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0204 	mvn.w	r2, #4
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8b6 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8a8 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8b9 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d020      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0208 	mvn.w	r2, #8
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f890 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f882 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f893 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d020      	beq.n	8003234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f86a 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f85c 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f86d 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0201 	mvn.w	r2, #1
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f83a 	bl	80032cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f910 	bl	800349c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f83e 	bl	800331c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0220 	mvn.w	r2, #32
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8e2 	bl	8003488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a46      	ldr	r2, [pc, #280]	@ (800345c <TIM_Base_SetConfig+0x12c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334e:	d00f      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a43      	ldr	r2, [pc, #268]	@ (8003460 <TIM_Base_SetConfig+0x130>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a42      	ldr	r2, [pc, #264]	@ (8003464 <TIM_Base_SetConfig+0x134>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a41      	ldr	r2, [pc, #260]	@ (8003468 <TIM_Base_SetConfig+0x138>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a40      	ldr	r2, [pc, #256]	@ (800346c <TIM_Base_SetConfig+0x13c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d108      	bne.n	8003382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a35      	ldr	r2, [pc, #212]	@ (800345c <TIM_Base_SetConfig+0x12c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003390:	d027      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a32      	ldr	r2, [pc, #200]	@ (8003460 <TIM_Base_SetConfig+0x130>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d023      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a31      	ldr	r2, [pc, #196]	@ (8003464 <TIM_Base_SetConfig+0x134>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a30      	ldr	r2, [pc, #192]	@ (8003468 <TIM_Base_SetConfig+0x138>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2f      	ldr	r2, [pc, #188]	@ (800346c <TIM_Base_SetConfig+0x13c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d017      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003470 <TIM_Base_SetConfig+0x140>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003474 <TIM_Base_SetConfig+0x144>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003478 <TIM_Base_SetConfig+0x148>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2b      	ldr	r2, [pc, #172]	@ (800347c <TIM_Base_SetConfig+0x14c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <TIM_Base_SetConfig+0x150>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a29      	ldr	r2, [pc, #164]	@ (8003484 <TIM_Base_SetConfig+0x154>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a10      	ldr	r2, [pc, #64]	@ (800345c <TIM_Base_SetConfig+0x12c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0xf8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a12      	ldr	r2, [pc, #72]	@ (800346c <TIM_Base_SetConfig+0x13c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f023 0201 	bic.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]
  }
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40010400 	.word	0x40010400
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	40001800 	.word	0x40001800
 8003480:	40001c00 	.word	0x40001c00
 8003484:	40002000 	.word	0x40002000

08003488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e042      	b.n	8003548 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd ff78 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f973 	bl	80037e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d175      	bne.n	800365c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x2c>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e06e      	b.n	800365e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	@ 0x21
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358e:	f7fe f877 	bl	8001680 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a8:	d108      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	e003      	b.n	80035c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c4:	e02e      	b.n	8003624 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	@ 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f848 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03a      	b.n	800365e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	3302      	adds	r3, #2
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e007      	b.n	8003616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1cb      	bne.n	80035c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	2140      	movs	r1, #64	@ 0x40
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f814 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e006      	b.n	800365e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003676:	e03b      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d037      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003680:	f7fd fffe 	bl	8001680 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d302      	bcc.n	8003696 <UART_WaitOnFlagUntilTimeout+0x30>
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e03a      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b80      	cmp	r3, #128	@ 0x80
 80036ac:	d020      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d01d      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d116      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f81d 	bl	8003718 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2208      	movs	r2, #8
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e00f      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d0b4      	beq.n	8003678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b095      	sub	sp, #84	@ 0x54
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003740:	643a      	str	r2, [r7, #64]	@ 0x40
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	61fb      	str	r3, [r7, #28]
   return(result);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3314      	adds	r3, #20
 8003772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800377a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	d119      	bne.n	80037c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 0310 	bic.w	r3, r3, #16
 80037a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037b0:	61ba      	str	r2, [r7, #24]
 80037b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	613b      	str	r3, [r7, #16]
   return(result);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037d2:	bf00      	nop
 80037d4:	3754      	adds	r7, #84	@ 0x54
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	b0c0      	sub	sp, #256	@ 0x100
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	ea40 0301 	orr.w	r3, r0, r1
 8003808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003838:	f021 010c 	bic.w	r1, r1, #12
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	6999      	ldr	r1, [r3, #24]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	ea40 0301 	orr.w	r3, r0, r1
 8003866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <UART_SetConfig+0x2cc>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d005      	beq.n	8003880 <UART_SetConfig+0xa0>
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab0 <UART_SetConfig+0x2d0>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d104      	bne.n	800388a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7fe fe92 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 8003884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003888:	e003      	b.n	8003892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7fe fe79 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 800388e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389c:	f040 810c 	bne.w	8003ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	1891      	adds	r1, r2, r2
 80038b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ba:	415b      	adcs	r3, r3
 80038bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038c2:	4621      	mov	r1, r4
 80038c4:	eb12 0801 	adds.w	r8, r2, r1
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb43 0901 	adc.w	r9, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e2:	4690      	mov	r8, r2
 80038e4:	4699      	mov	r9, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb18 0303 	adds.w	r3, r8, r3
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f0:	462b      	mov	r3, r5
 80038f2:	eb49 0303 	adc.w	r3, r9, r3
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003906:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800390a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800390e:	460b      	mov	r3, r1
 8003910:	18db      	adds	r3, r3, r3
 8003912:	653b      	str	r3, [r7, #80]	@ 0x50
 8003914:	4613      	mov	r3, r2
 8003916:	eb42 0303 	adc.w	r3, r2, r3
 800391a:	657b      	str	r3, [r7, #84]	@ 0x54
 800391c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003924:	f7fd f86a 	bl	80009fc <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4b61      	ldr	r3, [pc, #388]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	011c      	lsls	r4, r3, #4
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003940:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003948:	4642      	mov	r2, r8
 800394a:	464b      	mov	r3, r9
 800394c:	1891      	adds	r1, r2, r2
 800394e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003950:	415b      	adcs	r3, r3
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003958:	4641      	mov	r1, r8
 800395a:	eb12 0a01 	adds.w	sl, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0b01 	adc.w	fp, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003978:	4692      	mov	sl, r2
 800397a:	469b      	mov	fp, r3
 800397c:	4643      	mov	r3, r8
 800397e:	eb1a 0303 	adds.w	r3, sl, r3
 8003982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003986:	464b      	mov	r3, r9
 8003988:	eb4b 0303 	adc.w	r3, fp, r3
 800398c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800399c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039a4:	460b      	mov	r3, r1
 80039a6:	18db      	adds	r3, r3, r3
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039aa:	4613      	mov	r3, r2
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ba:	f7fd f81f 	bl	80009fc <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039c6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2264      	movs	r2, #100	@ 0x64
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	1acb      	subs	r3, r1, r3
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 2302 	umull	r2, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039e8:	441c      	add	r4, r3
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a04:	415b      	adcs	r3, r3
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	1851      	adds	r1, r2, r1
 8003a10:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a12:	4649      	mov	r1, r9
 8003a14:	414b      	adcs	r3, r1
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a24:	4659      	mov	r1, fp
 8003a26:	00cb      	lsls	r3, r1, #3
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2e:	4651      	mov	r1, sl
 8003a30:	00ca      	lsls	r2, r1, #3
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	464b      	mov	r3, r9
 8003a42:	460a      	mov	r2, r1
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a60:	460b      	mov	r3, r1
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a66:	4613      	mov	r3, r2
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a76:	f7fc ffc1 	bl	80009fc <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2164      	movs	r1, #100	@ 0x64
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	3332      	adds	r3, #50	@ 0x32
 8003a92:	4a08      	ldr	r2, [pc, #32]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 0207 	and.w	r2, r3, #7
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4422      	add	r2, r4
 8003aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa8:	e106      	b.n	8003cb8 <UART_SetConfig+0x4d8>
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aca:	4642      	mov	r2, r8
 8003acc:	464b      	mov	r3, r9
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	6239      	str	r1, [r7, #32]
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ada:	4641      	mov	r1, r8
 8003adc:	1854      	adds	r4, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0501 	adc.w	r5, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b00:	464b      	mov	r3, r9
 8003b02:	eb45 0303 	adc.w	r3, r5, r3
 8003b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b26:	4629      	mov	r1, r5
 8003b28:	008b      	lsls	r3, r1, #2
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b30:	4621      	mov	r1, r4
 8003b32:	008a      	lsls	r2, r1, #2
 8003b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b38:	f7fc ff60 	bl	80009fc <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b60      	ldr	r3, [pc, #384]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011c      	lsls	r4, r3, #4
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	61b9      	str	r1, [r7, #24]
 8003b64:	415b      	adcs	r3, r3
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	1851      	adds	r1, r2, r1
 8003b70:	6139      	str	r1, [r7, #16]
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b84:	4659      	mov	r1, fp
 8003b86:	00cb      	lsls	r3, r1, #3
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	4651      	mov	r1, sl
 8003b90:	00ca      	lsls	r2, r1, #3
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bce:	4641      	mov	r1, r8
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bd6:	f7fc ff11 	bl	80009fc <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b38      	ldr	r3, [pc, #224]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	@ 0x32
 8003bf4:	4a33      	ldr	r2, [pc, #204]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c52:	464b      	mov	r3, r9
 8003c54:	460a      	mov	r2, r1
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c74:	4649      	mov	r1, r9
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7e:	4641      	mov	r1, r8
 8003c80:	008a      	lsls	r2, r1, #2
 8003c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c86:	f7fc feb9 	bl	80009fc <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2164      	movs	r1, #100	@ 0x64
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	@ 0x32
 8003ca2:	4a08      	ldr	r2, [pc, #32]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4422      	add	r2, r4
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <siprintf>:
 8003cc8:	b40e      	push	{r1, r2, r3}
 8003cca:	b510      	push	{r4, lr}
 8003ccc:	b09d      	sub	sp, #116	@ 0x74
 8003cce:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003cd0:	9002      	str	r0, [sp, #8]
 8003cd2:	9006      	str	r0, [sp, #24]
 8003cd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cd8:	480a      	ldr	r0, [pc, #40]	@ (8003d04 <siprintf+0x3c>)
 8003cda:	9107      	str	r1, [sp, #28]
 8003cdc:	9104      	str	r1, [sp, #16]
 8003cde:	490a      	ldr	r1, [pc, #40]	@ (8003d08 <siprintf+0x40>)
 8003ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce4:	9105      	str	r1, [sp, #20]
 8003ce6:	2400      	movs	r4, #0
 8003ce8:	a902      	add	r1, sp, #8
 8003cea:	6800      	ldr	r0, [r0, #0]
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003cf0:	f000 f994 	bl	800401c <_svfiprintf_r>
 8003cf4:	9b02      	ldr	r3, [sp, #8]
 8003cf6:	701c      	strb	r4, [r3, #0]
 8003cf8:	b01d      	add	sp, #116	@ 0x74
 8003cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cfe:	b003      	add	sp, #12
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	200000c0 	.word	0x200000c0
 8003d08:	ffff0208 	.word	0xffff0208

08003d0c <memset>:
 8003d0c:	4402      	add	r2, r0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <__errno>:
 8003d1c:	4b01      	ldr	r3, [pc, #4]	@ (8003d24 <__errno+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200000c0 	.word	0x200000c0

08003d28 <__libc_init_array>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d60 <__libc_init_array+0x38>)
 8003d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d64 <__libc_init_array+0x3c>)
 8003d2e:	1b64      	subs	r4, r4, r5
 8003d30:	10a4      	asrs	r4, r4, #2
 8003d32:	2600      	movs	r6, #0
 8003d34:	42a6      	cmp	r6, r4
 8003d36:	d109      	bne.n	8003d4c <__libc_init_array+0x24>
 8003d38:	4d0b      	ldr	r5, [pc, #44]	@ (8003d68 <__libc_init_array+0x40>)
 8003d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d6c <__libc_init_array+0x44>)
 8003d3c:	f000 fc64 	bl	8004608 <_init>
 8003d40:	1b64      	subs	r4, r4, r5
 8003d42:	10a4      	asrs	r4, r4, #2
 8003d44:	2600      	movs	r6, #0
 8003d46:	42a6      	cmp	r6, r4
 8003d48:	d105      	bne.n	8003d56 <__libc_init_array+0x2e>
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d50:	4798      	blx	r3
 8003d52:	3601      	adds	r6, #1
 8003d54:	e7ee      	b.n	8003d34 <__libc_init_array+0xc>
 8003d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5a:	4798      	blx	r3
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	e7f2      	b.n	8003d46 <__libc_init_array+0x1e>
 8003d60:	080047d4 	.word	0x080047d4
 8003d64:	080047d4 	.word	0x080047d4
 8003d68:	080047d4 	.word	0x080047d4
 8003d6c:	080047d8 	.word	0x080047d8

08003d70 <__retarget_lock_acquire_recursive>:
 8003d70:	4770      	bx	lr

08003d72 <__retarget_lock_release_recursive>:
 8003d72:	4770      	bx	lr

08003d74 <_free_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4605      	mov	r5, r0
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d041      	beq.n	8003e00 <_free_r+0x8c>
 8003d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d80:	1f0c      	subs	r4, r1, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bfb8      	it	lt
 8003d86:	18e4      	addlt	r4, r4, r3
 8003d88:	f000 f8e0 	bl	8003f4c <__malloc_lock>
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <_free_r+0x90>)
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	b933      	cbnz	r3, 8003da0 <_free_r+0x2c>
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	6014      	str	r4, [r2, #0]
 8003d96:	4628      	mov	r0, r5
 8003d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d9c:	f000 b8dc 	b.w	8003f58 <__malloc_unlock>
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d908      	bls.n	8003db6 <_free_r+0x42>
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	1821      	adds	r1, r4, r0
 8003da8:	428b      	cmp	r3, r1
 8003daa:	bf01      	itttt	eq
 8003dac:	6819      	ldreq	r1, [r3, #0]
 8003dae:	685b      	ldreq	r3, [r3, #4]
 8003db0:	1809      	addeq	r1, r1, r0
 8003db2:	6021      	streq	r1, [r4, #0]
 8003db4:	e7ed      	b.n	8003d92 <_free_r+0x1e>
 8003db6:	461a      	mov	r2, r3
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b10b      	cbz	r3, 8003dc0 <_free_r+0x4c>
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d9fa      	bls.n	8003db6 <_free_r+0x42>
 8003dc0:	6811      	ldr	r1, [r2, #0]
 8003dc2:	1850      	adds	r0, r2, r1
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d10b      	bne.n	8003de0 <_free_r+0x6c>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	4401      	add	r1, r0
 8003dcc:	1850      	adds	r0, r2, r1
 8003dce:	4283      	cmp	r3, r0
 8003dd0:	6011      	str	r1, [r2, #0]
 8003dd2:	d1e0      	bne.n	8003d96 <_free_r+0x22>
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	6053      	str	r3, [r2, #4]
 8003dda:	4408      	add	r0, r1
 8003ddc:	6010      	str	r0, [r2, #0]
 8003dde:	e7da      	b.n	8003d96 <_free_r+0x22>
 8003de0:	d902      	bls.n	8003de8 <_free_r+0x74>
 8003de2:	230c      	movs	r3, #12
 8003de4:	602b      	str	r3, [r5, #0]
 8003de6:	e7d6      	b.n	8003d96 <_free_r+0x22>
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	1821      	adds	r1, r4, r0
 8003dec:	428b      	cmp	r3, r1
 8003dee:	bf04      	itt	eq
 8003df0:	6819      	ldreq	r1, [r3, #0]
 8003df2:	685b      	ldreq	r3, [r3, #4]
 8003df4:	6063      	str	r3, [r4, #4]
 8003df6:	bf04      	itt	eq
 8003df8:	1809      	addeq	r1, r1, r0
 8003dfa:	6021      	streq	r1, [r4, #0]
 8003dfc:	6054      	str	r4, [r2, #4]
 8003dfe:	e7ca      	b.n	8003d96 <_free_r+0x22>
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	bf00      	nop
 8003e04:	20000434 	.word	0x20000434

08003e08 <sbrk_aligned>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8003e48 <sbrk_aligned+0x40>)
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	6831      	ldr	r1, [r6, #0]
 8003e10:	4605      	mov	r5, r0
 8003e12:	b911      	cbnz	r1, 8003e1a <sbrk_aligned+0x12>
 8003e14:	f000 fba4 	bl	8004560 <_sbrk_r>
 8003e18:	6030      	str	r0, [r6, #0]
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f000 fb9f 	bl	8004560 <_sbrk_r>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	d103      	bne.n	8003e2e <sbrk_aligned+0x26>
 8003e26:	f04f 34ff 	mov.w	r4, #4294967295
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	bd70      	pop	{r4, r5, r6, pc}
 8003e2e:	1cc4      	adds	r4, r0, #3
 8003e30:	f024 0403 	bic.w	r4, r4, #3
 8003e34:	42a0      	cmp	r0, r4
 8003e36:	d0f8      	beq.n	8003e2a <sbrk_aligned+0x22>
 8003e38:	1a21      	subs	r1, r4, r0
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f000 fb90 	bl	8004560 <_sbrk_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d1f2      	bne.n	8003e2a <sbrk_aligned+0x22>
 8003e44:	e7ef      	b.n	8003e26 <sbrk_aligned+0x1e>
 8003e46:	bf00      	nop
 8003e48:	20000430 	.word	0x20000430

08003e4c <_malloc_r>:
 8003e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e50:	1ccd      	adds	r5, r1, #3
 8003e52:	f025 0503 	bic.w	r5, r5, #3
 8003e56:	3508      	adds	r5, #8
 8003e58:	2d0c      	cmp	r5, #12
 8003e5a:	bf38      	it	cc
 8003e5c:	250c      	movcc	r5, #12
 8003e5e:	2d00      	cmp	r5, #0
 8003e60:	4606      	mov	r6, r0
 8003e62:	db01      	blt.n	8003e68 <_malloc_r+0x1c>
 8003e64:	42a9      	cmp	r1, r5
 8003e66:	d904      	bls.n	8003e72 <_malloc_r+0x26>
 8003e68:	230c      	movs	r3, #12
 8003e6a:	6033      	str	r3, [r6, #0]
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f48 <_malloc_r+0xfc>
 8003e76:	f000 f869 	bl	8003f4c <__malloc_lock>
 8003e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e7e:	461c      	mov	r4, r3
 8003e80:	bb44      	cbnz	r4, 8003ed4 <_malloc_r+0x88>
 8003e82:	4629      	mov	r1, r5
 8003e84:	4630      	mov	r0, r6
 8003e86:	f7ff ffbf 	bl	8003e08 <sbrk_aligned>
 8003e8a:	1c43      	adds	r3, r0, #1
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	d158      	bne.n	8003f42 <_malloc_r+0xf6>
 8003e90:	f8d8 4000 	ldr.w	r4, [r8]
 8003e94:	4627      	mov	r7, r4
 8003e96:	2f00      	cmp	r7, #0
 8003e98:	d143      	bne.n	8003f22 <_malloc_r+0xd6>
 8003e9a:	2c00      	cmp	r4, #0
 8003e9c:	d04b      	beq.n	8003f36 <_malloc_r+0xea>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	4639      	mov	r1, r7
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	eb04 0903 	add.w	r9, r4, r3
 8003ea8:	f000 fb5a 	bl	8004560 <_sbrk_r>
 8003eac:	4581      	cmp	r9, r0
 8003eae:	d142      	bne.n	8003f36 <_malloc_r+0xea>
 8003eb0:	6821      	ldr	r1, [r4, #0]
 8003eb2:	1a6d      	subs	r5, r5, r1
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f7ff ffa6 	bl	8003e08 <sbrk_aligned>
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d03a      	beq.n	8003f36 <_malloc_r+0xea>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	442b      	add	r3, r5
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	bb62      	cbnz	r2, 8003f28 <_malloc_r+0xdc>
 8003ece:	f8c8 7000 	str.w	r7, [r8]
 8003ed2:	e00f      	b.n	8003ef4 <_malloc_r+0xa8>
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	1b52      	subs	r2, r2, r5
 8003ed8:	d420      	bmi.n	8003f1c <_malloc_r+0xd0>
 8003eda:	2a0b      	cmp	r2, #11
 8003edc:	d917      	bls.n	8003f0e <_malloc_r+0xc2>
 8003ede:	1961      	adds	r1, r4, r5
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	6025      	str	r5, [r4, #0]
 8003ee4:	bf18      	it	ne
 8003ee6:	6059      	strne	r1, [r3, #4]
 8003ee8:	6863      	ldr	r3, [r4, #4]
 8003eea:	bf08      	it	eq
 8003eec:	f8c8 1000 	streq.w	r1, [r8]
 8003ef0:	5162      	str	r2, [r4, r5]
 8003ef2:	604b      	str	r3, [r1, #4]
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 f82f 	bl	8003f58 <__malloc_unlock>
 8003efa:	f104 000b 	add.w	r0, r4, #11
 8003efe:	1d23      	adds	r3, r4, #4
 8003f00:	f020 0007 	bic.w	r0, r0, #7
 8003f04:	1ac2      	subs	r2, r0, r3
 8003f06:	bf1c      	itt	ne
 8003f08:	1a1b      	subne	r3, r3, r0
 8003f0a:	50a3      	strne	r3, [r4, r2]
 8003f0c:	e7af      	b.n	8003e6e <_malloc_r+0x22>
 8003f0e:	6862      	ldr	r2, [r4, #4]
 8003f10:	42a3      	cmp	r3, r4
 8003f12:	bf0c      	ite	eq
 8003f14:	f8c8 2000 	streq.w	r2, [r8]
 8003f18:	605a      	strne	r2, [r3, #4]
 8003f1a:	e7eb      	b.n	8003ef4 <_malloc_r+0xa8>
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	6864      	ldr	r4, [r4, #4]
 8003f20:	e7ae      	b.n	8003e80 <_malloc_r+0x34>
 8003f22:	463c      	mov	r4, r7
 8003f24:	687f      	ldr	r7, [r7, #4]
 8003f26:	e7b6      	b.n	8003e96 <_malloc_r+0x4a>
 8003f28:	461a      	mov	r2, r3
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	d1fb      	bne.n	8003f28 <_malloc_r+0xdc>
 8003f30:	2300      	movs	r3, #0
 8003f32:	6053      	str	r3, [r2, #4]
 8003f34:	e7de      	b.n	8003ef4 <_malloc_r+0xa8>
 8003f36:	230c      	movs	r3, #12
 8003f38:	6033      	str	r3, [r6, #0]
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f000 f80c 	bl	8003f58 <__malloc_unlock>
 8003f40:	e794      	b.n	8003e6c <_malloc_r+0x20>
 8003f42:	6005      	str	r5, [r0, #0]
 8003f44:	e7d6      	b.n	8003ef4 <_malloc_r+0xa8>
 8003f46:	bf00      	nop
 8003f48:	20000434 	.word	0x20000434

08003f4c <__malloc_lock>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	@ (8003f54 <__malloc_lock+0x8>)
 8003f4e:	f7ff bf0f 	b.w	8003d70 <__retarget_lock_acquire_recursive>
 8003f52:	bf00      	nop
 8003f54:	2000042c 	.word	0x2000042c

08003f58 <__malloc_unlock>:
 8003f58:	4801      	ldr	r0, [pc, #4]	@ (8003f60 <__malloc_unlock+0x8>)
 8003f5a:	f7ff bf0a 	b.w	8003d72 <__retarget_lock_release_recursive>
 8003f5e:	bf00      	nop
 8003f60:	2000042c 	.word	0x2000042c

08003f64 <__ssputs_r>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	688e      	ldr	r6, [r1, #8]
 8003f6a:	461f      	mov	r7, r3
 8003f6c:	42be      	cmp	r6, r7
 8003f6e:	680b      	ldr	r3, [r1, #0]
 8003f70:	4682      	mov	sl, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	4690      	mov	r8, r2
 8003f76:	d82d      	bhi.n	8003fd4 <__ssputs_r+0x70>
 8003f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f80:	d026      	beq.n	8003fd0 <__ssputs_r+0x6c>
 8003f82:	6965      	ldr	r5, [r4, #20]
 8003f84:	6909      	ldr	r1, [r1, #16]
 8003f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f8a:	eba3 0901 	sub.w	r9, r3, r1
 8003f8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f92:	1c7b      	adds	r3, r7, #1
 8003f94:	444b      	add	r3, r9
 8003f96:	106d      	asrs	r5, r5, #1
 8003f98:	429d      	cmp	r5, r3
 8003f9a:	bf38      	it	cc
 8003f9c:	461d      	movcc	r5, r3
 8003f9e:	0553      	lsls	r3, r2, #21
 8003fa0:	d527      	bpl.n	8003ff2 <__ssputs_r+0x8e>
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7ff ff52 	bl	8003e4c <_malloc_r>
 8003fa8:	4606      	mov	r6, r0
 8003faa:	b360      	cbz	r0, 8004006 <__ssputs_r+0xa2>
 8003fac:	6921      	ldr	r1, [r4, #16]
 8003fae:	464a      	mov	r2, r9
 8003fb0:	f000 fae6 	bl	8004580 <memcpy>
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	6126      	str	r6, [r4, #16]
 8003fc2:	6165      	str	r5, [r4, #20]
 8003fc4:	444e      	add	r6, r9
 8003fc6:	eba5 0509 	sub.w	r5, r5, r9
 8003fca:	6026      	str	r6, [r4, #0]
 8003fcc:	60a5      	str	r5, [r4, #8]
 8003fce:	463e      	mov	r6, r7
 8003fd0:	42be      	cmp	r6, r7
 8003fd2:	d900      	bls.n	8003fd6 <__ssputs_r+0x72>
 8003fd4:	463e      	mov	r6, r7
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	4632      	mov	r2, r6
 8003fda:	4641      	mov	r1, r8
 8003fdc:	f000 faa6 	bl	800452c <memmove>
 8003fe0:	68a3      	ldr	r3, [r4, #8]
 8003fe2:	1b9b      	subs	r3, r3, r6
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	4433      	add	r3, r6
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	2000      	movs	r0, #0
 8003fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	f000 fad2 	bl	800459c <_realloc_r>
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d1e0      	bne.n	8003fc0 <__ssputs_r+0x5c>
 8003ffe:	6921      	ldr	r1, [r4, #16]
 8004000:	4650      	mov	r0, sl
 8004002:	f7ff feb7 	bl	8003d74 <_free_r>
 8004006:	230c      	movs	r3, #12
 8004008:	f8ca 3000 	str.w	r3, [sl]
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	e7e9      	b.n	8003fee <__ssputs_r+0x8a>
	...

0800401c <_svfiprintf_r>:
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	4698      	mov	r8, r3
 8004022:	898b      	ldrh	r3, [r1, #12]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	b09d      	sub	sp, #116	@ 0x74
 8004028:	4607      	mov	r7, r0
 800402a:	460d      	mov	r5, r1
 800402c:	4614      	mov	r4, r2
 800402e:	d510      	bpl.n	8004052 <_svfiprintf_r+0x36>
 8004030:	690b      	ldr	r3, [r1, #16]
 8004032:	b973      	cbnz	r3, 8004052 <_svfiprintf_r+0x36>
 8004034:	2140      	movs	r1, #64	@ 0x40
 8004036:	f7ff ff09 	bl	8003e4c <_malloc_r>
 800403a:	6028      	str	r0, [r5, #0]
 800403c:	6128      	str	r0, [r5, #16]
 800403e:	b930      	cbnz	r0, 800404e <_svfiprintf_r+0x32>
 8004040:	230c      	movs	r3, #12
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	b01d      	add	sp, #116	@ 0x74
 800404a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404e:	2340      	movs	r3, #64	@ 0x40
 8004050:	616b      	str	r3, [r5, #20]
 8004052:	2300      	movs	r3, #0
 8004054:	9309      	str	r3, [sp, #36]	@ 0x24
 8004056:	2320      	movs	r3, #32
 8004058:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800405c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004060:	2330      	movs	r3, #48	@ 0x30
 8004062:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004200 <_svfiprintf_r+0x1e4>
 8004066:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800406a:	f04f 0901 	mov.w	r9, #1
 800406e:	4623      	mov	r3, r4
 8004070:	469a      	mov	sl, r3
 8004072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004076:	b10a      	cbz	r2, 800407c <_svfiprintf_r+0x60>
 8004078:	2a25      	cmp	r2, #37	@ 0x25
 800407a:	d1f9      	bne.n	8004070 <_svfiprintf_r+0x54>
 800407c:	ebba 0b04 	subs.w	fp, sl, r4
 8004080:	d00b      	beq.n	800409a <_svfiprintf_r+0x7e>
 8004082:	465b      	mov	r3, fp
 8004084:	4622      	mov	r2, r4
 8004086:	4629      	mov	r1, r5
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff ff6b 	bl	8003f64 <__ssputs_r>
 800408e:	3001      	adds	r0, #1
 8004090:	f000 80a7 	beq.w	80041e2 <_svfiprintf_r+0x1c6>
 8004094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004096:	445a      	add	r2, fp
 8004098:	9209      	str	r2, [sp, #36]	@ 0x24
 800409a:	f89a 3000 	ldrb.w	r3, [sl]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 809f 	beq.w	80041e2 <_svfiprintf_r+0x1c6>
 80040a4:	2300      	movs	r3, #0
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295
 80040aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ae:	f10a 0a01 	add.w	sl, sl, #1
 80040b2:	9304      	str	r3, [sp, #16]
 80040b4:	9307      	str	r3, [sp, #28]
 80040b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80040bc:	4654      	mov	r4, sl
 80040be:	2205      	movs	r2, #5
 80040c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c4:	484e      	ldr	r0, [pc, #312]	@ (8004200 <_svfiprintf_r+0x1e4>)
 80040c6:	f7fc f8bb 	bl	8000240 <memchr>
 80040ca:	9a04      	ldr	r2, [sp, #16]
 80040cc:	b9d8      	cbnz	r0, 8004106 <_svfiprintf_r+0xea>
 80040ce:	06d0      	lsls	r0, r2, #27
 80040d0:	bf44      	itt	mi
 80040d2:	2320      	movmi	r3, #32
 80040d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040d8:	0711      	lsls	r1, r2, #28
 80040da:	bf44      	itt	mi
 80040dc:	232b      	movmi	r3, #43	@ 0x2b
 80040de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040e2:	f89a 3000 	ldrb.w	r3, [sl]
 80040e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e8:	d015      	beq.n	8004116 <_svfiprintf_r+0xfa>
 80040ea:	9a07      	ldr	r2, [sp, #28]
 80040ec:	4654      	mov	r4, sl
 80040ee:	2000      	movs	r0, #0
 80040f0:	f04f 0c0a 	mov.w	ip, #10
 80040f4:	4621      	mov	r1, r4
 80040f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fa:	3b30      	subs	r3, #48	@ 0x30
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	d94b      	bls.n	8004198 <_svfiprintf_r+0x17c>
 8004100:	b1b0      	cbz	r0, 8004130 <_svfiprintf_r+0x114>
 8004102:	9207      	str	r2, [sp, #28]
 8004104:	e014      	b.n	8004130 <_svfiprintf_r+0x114>
 8004106:	eba0 0308 	sub.w	r3, r0, r8
 800410a:	fa09 f303 	lsl.w	r3, r9, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	46a2      	mov	sl, r4
 8004114:	e7d2      	b.n	80040bc <_svfiprintf_r+0xa0>
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	1d19      	adds	r1, r3, #4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	9103      	str	r1, [sp, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfbb      	ittet	lt
 8004122:	425b      	neglt	r3, r3
 8004124:	f042 0202 	orrlt.w	r2, r2, #2
 8004128:	9307      	strge	r3, [sp, #28]
 800412a:	9307      	strlt	r3, [sp, #28]
 800412c:	bfb8      	it	lt
 800412e:	9204      	strlt	r2, [sp, #16]
 8004130:	7823      	ldrb	r3, [r4, #0]
 8004132:	2b2e      	cmp	r3, #46	@ 0x2e
 8004134:	d10a      	bne.n	800414c <_svfiprintf_r+0x130>
 8004136:	7863      	ldrb	r3, [r4, #1]
 8004138:	2b2a      	cmp	r3, #42	@ 0x2a
 800413a:	d132      	bne.n	80041a2 <_svfiprintf_r+0x186>
 800413c:	9b03      	ldr	r3, [sp, #12]
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	9203      	str	r2, [sp, #12]
 8004144:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004148:	3402      	adds	r4, #2
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004210 <_svfiprintf_r+0x1f4>
 8004150:	7821      	ldrb	r1, [r4, #0]
 8004152:	2203      	movs	r2, #3
 8004154:	4650      	mov	r0, sl
 8004156:	f7fc f873 	bl	8000240 <memchr>
 800415a:	b138      	cbz	r0, 800416c <_svfiprintf_r+0x150>
 800415c:	9b04      	ldr	r3, [sp, #16]
 800415e:	eba0 000a 	sub.w	r0, r0, sl
 8004162:	2240      	movs	r2, #64	@ 0x40
 8004164:	4082      	lsls	r2, r0
 8004166:	4313      	orrs	r3, r2
 8004168:	3401      	adds	r4, #1
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004170:	4824      	ldr	r0, [pc, #144]	@ (8004204 <_svfiprintf_r+0x1e8>)
 8004172:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004176:	2206      	movs	r2, #6
 8004178:	f7fc f862 	bl	8000240 <memchr>
 800417c:	2800      	cmp	r0, #0
 800417e:	d036      	beq.n	80041ee <_svfiprintf_r+0x1d2>
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <_svfiprintf_r+0x1ec>)
 8004182:	bb1b      	cbnz	r3, 80041cc <_svfiprintf_r+0x1b0>
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	3307      	adds	r3, #7
 8004188:	f023 0307 	bic.w	r3, r3, #7
 800418c:	3308      	adds	r3, #8
 800418e:	9303      	str	r3, [sp, #12]
 8004190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004192:	4433      	add	r3, r6
 8004194:	9309      	str	r3, [sp, #36]	@ 0x24
 8004196:	e76a      	b.n	800406e <_svfiprintf_r+0x52>
 8004198:	fb0c 3202 	mla	r2, ip, r2, r3
 800419c:	460c      	mov	r4, r1
 800419e:	2001      	movs	r0, #1
 80041a0:	e7a8      	b.n	80040f4 <_svfiprintf_r+0xd8>
 80041a2:	2300      	movs	r3, #0
 80041a4:	3401      	adds	r4, #1
 80041a6:	9305      	str	r3, [sp, #20]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f04f 0c0a 	mov.w	ip, #10
 80041ae:	4620      	mov	r0, r4
 80041b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b4:	3a30      	subs	r2, #48	@ 0x30
 80041b6:	2a09      	cmp	r2, #9
 80041b8:	d903      	bls.n	80041c2 <_svfiprintf_r+0x1a6>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0c6      	beq.n	800414c <_svfiprintf_r+0x130>
 80041be:	9105      	str	r1, [sp, #20]
 80041c0:	e7c4      	b.n	800414c <_svfiprintf_r+0x130>
 80041c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041c6:	4604      	mov	r4, r0
 80041c8:	2301      	movs	r3, #1
 80041ca:	e7f0      	b.n	80041ae <_svfiprintf_r+0x192>
 80041cc:	ab03      	add	r3, sp, #12
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	462a      	mov	r2, r5
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <_svfiprintf_r+0x1f0>)
 80041d4:	a904      	add	r1, sp, #16
 80041d6:	4638      	mov	r0, r7
 80041d8:	f3af 8000 	nop.w
 80041dc:	1c42      	adds	r2, r0, #1
 80041de:	4606      	mov	r6, r0
 80041e0:	d1d6      	bne.n	8004190 <_svfiprintf_r+0x174>
 80041e2:	89ab      	ldrh	r3, [r5, #12]
 80041e4:	065b      	lsls	r3, r3, #25
 80041e6:	f53f af2d 	bmi.w	8004044 <_svfiprintf_r+0x28>
 80041ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041ec:	e72c      	b.n	8004048 <_svfiprintf_r+0x2c>
 80041ee:	ab03      	add	r3, sp, #12
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	462a      	mov	r2, r5
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <_svfiprintf_r+0x1f0>)
 80041f6:	a904      	add	r1, sp, #16
 80041f8:	4638      	mov	r0, r7
 80041fa:	f000 f879 	bl	80042f0 <_printf_i>
 80041fe:	e7ed      	b.n	80041dc <_svfiprintf_r+0x1c0>
 8004200:	08004798 	.word	0x08004798
 8004204:	080047a2 	.word	0x080047a2
 8004208:	00000000 	.word	0x00000000
 800420c:	08003f65 	.word	0x08003f65
 8004210:	0800479e 	.word	0x0800479e

08004214 <_printf_common>:
 8004214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	4616      	mov	r6, r2
 800421a:	4698      	mov	r8, r3
 800421c:	688a      	ldr	r2, [r1, #8]
 800421e:	690b      	ldr	r3, [r1, #16]
 8004220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004224:	4293      	cmp	r3, r2
 8004226:	bfb8      	it	lt
 8004228:	4613      	movlt	r3, r2
 800422a:	6033      	str	r3, [r6, #0]
 800422c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004230:	4607      	mov	r7, r0
 8004232:	460c      	mov	r4, r1
 8004234:	b10a      	cbz	r2, 800423a <_printf_common+0x26>
 8004236:	3301      	adds	r3, #1
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	0699      	lsls	r1, r3, #26
 800423e:	bf42      	ittt	mi
 8004240:	6833      	ldrmi	r3, [r6, #0]
 8004242:	3302      	addmi	r3, #2
 8004244:	6033      	strmi	r3, [r6, #0]
 8004246:	6825      	ldr	r5, [r4, #0]
 8004248:	f015 0506 	ands.w	r5, r5, #6
 800424c:	d106      	bne.n	800425c <_printf_common+0x48>
 800424e:	f104 0a19 	add.w	sl, r4, #25
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	6832      	ldr	r2, [r6, #0]
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	42ab      	cmp	r3, r5
 800425a:	dc26      	bgt.n	80042aa <_printf_common+0x96>
 800425c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	3b00      	subs	r3, #0
 8004264:	bf18      	it	ne
 8004266:	2301      	movne	r3, #1
 8004268:	0692      	lsls	r2, r2, #26
 800426a:	d42b      	bmi.n	80042c4 <_printf_common+0xb0>
 800426c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004270:	4641      	mov	r1, r8
 8004272:	4638      	mov	r0, r7
 8004274:	47c8      	blx	r9
 8004276:	3001      	adds	r0, #1
 8004278:	d01e      	beq.n	80042b8 <_printf_common+0xa4>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	6922      	ldr	r2, [r4, #16]
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	2b04      	cmp	r3, #4
 8004284:	bf02      	ittt	eq
 8004286:	68e5      	ldreq	r5, [r4, #12]
 8004288:	6833      	ldreq	r3, [r6, #0]
 800428a:	1aed      	subeq	r5, r5, r3
 800428c:	68a3      	ldr	r3, [r4, #8]
 800428e:	bf0c      	ite	eq
 8004290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004294:	2500      	movne	r5, #0
 8004296:	4293      	cmp	r3, r2
 8004298:	bfc4      	itt	gt
 800429a:	1a9b      	subgt	r3, r3, r2
 800429c:	18ed      	addgt	r5, r5, r3
 800429e:	2600      	movs	r6, #0
 80042a0:	341a      	adds	r4, #26
 80042a2:	42b5      	cmp	r5, r6
 80042a4:	d11a      	bne.n	80042dc <_printf_common+0xc8>
 80042a6:	2000      	movs	r0, #0
 80042a8:	e008      	b.n	80042bc <_printf_common+0xa8>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4652      	mov	r2, sl
 80042ae:	4641      	mov	r1, r8
 80042b0:	4638      	mov	r0, r7
 80042b2:	47c8      	blx	r9
 80042b4:	3001      	adds	r0, #1
 80042b6:	d103      	bne.n	80042c0 <_printf_common+0xac>
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c0:	3501      	adds	r5, #1
 80042c2:	e7c6      	b.n	8004252 <_printf_common+0x3e>
 80042c4:	18e1      	adds	r1, r4, r3
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	2030      	movs	r0, #48	@ 0x30
 80042ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ce:	4422      	add	r2, r4
 80042d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042d8:	3302      	adds	r3, #2
 80042da:	e7c7      	b.n	800426c <_printf_common+0x58>
 80042dc:	2301      	movs	r3, #1
 80042de:	4622      	mov	r2, r4
 80042e0:	4641      	mov	r1, r8
 80042e2:	4638      	mov	r0, r7
 80042e4:	47c8      	blx	r9
 80042e6:	3001      	adds	r0, #1
 80042e8:	d0e6      	beq.n	80042b8 <_printf_common+0xa4>
 80042ea:	3601      	adds	r6, #1
 80042ec:	e7d9      	b.n	80042a2 <_printf_common+0x8e>
	...

080042f0 <_printf_i>:
 80042f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	7e0f      	ldrb	r7, [r1, #24]
 80042f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042f8:	2f78      	cmp	r7, #120	@ 0x78
 80042fa:	4691      	mov	r9, r2
 80042fc:	4680      	mov	r8, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	469a      	mov	sl, r3
 8004302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004306:	d807      	bhi.n	8004318 <_printf_i+0x28>
 8004308:	2f62      	cmp	r7, #98	@ 0x62
 800430a:	d80a      	bhi.n	8004322 <_printf_i+0x32>
 800430c:	2f00      	cmp	r7, #0
 800430e:	f000 80d1 	beq.w	80044b4 <_printf_i+0x1c4>
 8004312:	2f58      	cmp	r7, #88	@ 0x58
 8004314:	f000 80b8 	beq.w	8004488 <_printf_i+0x198>
 8004318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800431c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004320:	e03a      	b.n	8004398 <_printf_i+0xa8>
 8004322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004326:	2b15      	cmp	r3, #21
 8004328:	d8f6      	bhi.n	8004318 <_printf_i+0x28>
 800432a:	a101      	add	r1, pc, #4	@ (adr r1, 8004330 <_printf_i+0x40>)
 800432c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004330:	08004389 	.word	0x08004389
 8004334:	0800439d 	.word	0x0800439d
 8004338:	08004319 	.word	0x08004319
 800433c:	08004319 	.word	0x08004319
 8004340:	08004319 	.word	0x08004319
 8004344:	08004319 	.word	0x08004319
 8004348:	0800439d 	.word	0x0800439d
 800434c:	08004319 	.word	0x08004319
 8004350:	08004319 	.word	0x08004319
 8004354:	08004319 	.word	0x08004319
 8004358:	08004319 	.word	0x08004319
 800435c:	0800449b 	.word	0x0800449b
 8004360:	080043c7 	.word	0x080043c7
 8004364:	08004455 	.word	0x08004455
 8004368:	08004319 	.word	0x08004319
 800436c:	08004319 	.word	0x08004319
 8004370:	080044bd 	.word	0x080044bd
 8004374:	08004319 	.word	0x08004319
 8004378:	080043c7 	.word	0x080043c7
 800437c:	08004319 	.word	0x08004319
 8004380:	08004319 	.word	0x08004319
 8004384:	0800445d 	.word	0x0800445d
 8004388:	6833      	ldr	r3, [r6, #0]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6032      	str	r2, [r6, #0]
 8004390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004398:	2301      	movs	r3, #1
 800439a:	e09c      	b.n	80044d6 <_printf_i+0x1e6>
 800439c:	6833      	ldr	r3, [r6, #0]
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	6031      	str	r1, [r6, #0]
 80043a4:	0606      	lsls	r6, r0, #24
 80043a6:	d501      	bpl.n	80043ac <_printf_i+0xbc>
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	e003      	b.n	80043b4 <_printf_i+0xc4>
 80043ac:	0645      	lsls	r5, r0, #25
 80043ae:	d5fb      	bpl.n	80043a8 <_printf_i+0xb8>
 80043b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	da03      	bge.n	80043c0 <_printf_i+0xd0>
 80043b8:	232d      	movs	r3, #45	@ 0x2d
 80043ba:	426d      	negs	r5, r5
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c0:	4858      	ldr	r0, [pc, #352]	@ (8004524 <_printf_i+0x234>)
 80043c2:	230a      	movs	r3, #10
 80043c4:	e011      	b.n	80043ea <_printf_i+0xfa>
 80043c6:	6821      	ldr	r1, [r4, #0]
 80043c8:	6833      	ldr	r3, [r6, #0]
 80043ca:	0608      	lsls	r0, r1, #24
 80043cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80043d0:	d402      	bmi.n	80043d8 <_printf_i+0xe8>
 80043d2:	0649      	lsls	r1, r1, #25
 80043d4:	bf48      	it	mi
 80043d6:	b2ad      	uxthmi	r5, r5
 80043d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043da:	4852      	ldr	r0, [pc, #328]	@ (8004524 <_printf_i+0x234>)
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	bf14      	ite	ne
 80043e0:	230a      	movne	r3, #10
 80043e2:	2308      	moveq	r3, #8
 80043e4:	2100      	movs	r1, #0
 80043e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ea:	6866      	ldr	r6, [r4, #4]
 80043ec:	60a6      	str	r6, [r4, #8]
 80043ee:	2e00      	cmp	r6, #0
 80043f0:	db05      	blt.n	80043fe <_printf_i+0x10e>
 80043f2:	6821      	ldr	r1, [r4, #0]
 80043f4:	432e      	orrs	r6, r5
 80043f6:	f021 0104 	bic.w	r1, r1, #4
 80043fa:	6021      	str	r1, [r4, #0]
 80043fc:	d04b      	beq.n	8004496 <_printf_i+0x1a6>
 80043fe:	4616      	mov	r6, r2
 8004400:	fbb5 f1f3 	udiv	r1, r5, r3
 8004404:	fb03 5711 	mls	r7, r3, r1, r5
 8004408:	5dc7      	ldrb	r7, [r0, r7]
 800440a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800440e:	462f      	mov	r7, r5
 8004410:	42bb      	cmp	r3, r7
 8004412:	460d      	mov	r5, r1
 8004414:	d9f4      	bls.n	8004400 <_printf_i+0x110>
 8004416:	2b08      	cmp	r3, #8
 8004418:	d10b      	bne.n	8004432 <_printf_i+0x142>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	07df      	lsls	r7, r3, #31
 800441e:	d508      	bpl.n	8004432 <_printf_i+0x142>
 8004420:	6923      	ldr	r3, [r4, #16]
 8004422:	6861      	ldr	r1, [r4, #4]
 8004424:	4299      	cmp	r1, r3
 8004426:	bfde      	ittt	le
 8004428:	2330      	movle	r3, #48	@ 0x30
 800442a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800442e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004432:	1b92      	subs	r2, r2, r6
 8004434:	6122      	str	r2, [r4, #16]
 8004436:	f8cd a000 	str.w	sl, [sp]
 800443a:	464b      	mov	r3, r9
 800443c:	aa03      	add	r2, sp, #12
 800443e:	4621      	mov	r1, r4
 8004440:	4640      	mov	r0, r8
 8004442:	f7ff fee7 	bl	8004214 <_printf_common>
 8004446:	3001      	adds	r0, #1
 8004448:	d14a      	bne.n	80044e0 <_printf_i+0x1f0>
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	b004      	add	sp, #16
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f043 0320 	orr.w	r3, r3, #32
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	4832      	ldr	r0, [pc, #200]	@ (8004528 <_printf_i+0x238>)
 800445e:	2778      	movs	r7, #120	@ 0x78
 8004460:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	6831      	ldr	r1, [r6, #0]
 8004468:	061f      	lsls	r7, r3, #24
 800446a:	f851 5b04 	ldr.w	r5, [r1], #4
 800446e:	d402      	bmi.n	8004476 <_printf_i+0x186>
 8004470:	065f      	lsls	r7, r3, #25
 8004472:	bf48      	it	mi
 8004474:	b2ad      	uxthmi	r5, r5
 8004476:	6031      	str	r1, [r6, #0]
 8004478:	07d9      	lsls	r1, r3, #31
 800447a:	bf44      	itt	mi
 800447c:	f043 0320 	orrmi.w	r3, r3, #32
 8004480:	6023      	strmi	r3, [r4, #0]
 8004482:	b11d      	cbz	r5, 800448c <_printf_i+0x19c>
 8004484:	2310      	movs	r3, #16
 8004486:	e7ad      	b.n	80043e4 <_printf_i+0xf4>
 8004488:	4826      	ldr	r0, [pc, #152]	@ (8004524 <_printf_i+0x234>)
 800448a:	e7e9      	b.n	8004460 <_printf_i+0x170>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	f023 0320 	bic.w	r3, r3, #32
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	e7f6      	b.n	8004484 <_printf_i+0x194>
 8004496:	4616      	mov	r6, r2
 8004498:	e7bd      	b.n	8004416 <_printf_i+0x126>
 800449a:	6833      	ldr	r3, [r6, #0]
 800449c:	6825      	ldr	r5, [r4, #0]
 800449e:	6961      	ldr	r1, [r4, #20]
 80044a0:	1d18      	adds	r0, r3, #4
 80044a2:	6030      	str	r0, [r6, #0]
 80044a4:	062e      	lsls	r6, r5, #24
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	d501      	bpl.n	80044ae <_printf_i+0x1be>
 80044aa:	6019      	str	r1, [r3, #0]
 80044ac:	e002      	b.n	80044b4 <_printf_i+0x1c4>
 80044ae:	0668      	lsls	r0, r5, #25
 80044b0:	d5fb      	bpl.n	80044aa <_printf_i+0x1ba>
 80044b2:	8019      	strh	r1, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	4616      	mov	r6, r2
 80044ba:	e7bc      	b.n	8004436 <_printf_i+0x146>
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	6032      	str	r2, [r6, #0]
 80044c2:	681e      	ldr	r6, [r3, #0]
 80044c4:	6862      	ldr	r2, [r4, #4]
 80044c6:	2100      	movs	r1, #0
 80044c8:	4630      	mov	r0, r6
 80044ca:	f7fb feb9 	bl	8000240 <memchr>
 80044ce:	b108      	cbz	r0, 80044d4 <_printf_i+0x1e4>
 80044d0:	1b80      	subs	r0, r0, r6
 80044d2:	6060      	str	r0, [r4, #4]
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	6123      	str	r3, [r4, #16]
 80044d8:	2300      	movs	r3, #0
 80044da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044de:	e7aa      	b.n	8004436 <_printf_i+0x146>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	4632      	mov	r2, r6
 80044e4:	4649      	mov	r1, r9
 80044e6:	4640      	mov	r0, r8
 80044e8:	47d0      	blx	sl
 80044ea:	3001      	adds	r0, #1
 80044ec:	d0ad      	beq.n	800444a <_printf_i+0x15a>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	079b      	lsls	r3, r3, #30
 80044f2:	d413      	bmi.n	800451c <_printf_i+0x22c>
 80044f4:	68e0      	ldr	r0, [r4, #12]
 80044f6:	9b03      	ldr	r3, [sp, #12]
 80044f8:	4298      	cmp	r0, r3
 80044fa:	bfb8      	it	lt
 80044fc:	4618      	movlt	r0, r3
 80044fe:	e7a6      	b.n	800444e <_printf_i+0x15e>
 8004500:	2301      	movs	r3, #1
 8004502:	4632      	mov	r2, r6
 8004504:	4649      	mov	r1, r9
 8004506:	4640      	mov	r0, r8
 8004508:	47d0      	blx	sl
 800450a:	3001      	adds	r0, #1
 800450c:	d09d      	beq.n	800444a <_printf_i+0x15a>
 800450e:	3501      	adds	r5, #1
 8004510:	68e3      	ldr	r3, [r4, #12]
 8004512:	9903      	ldr	r1, [sp, #12]
 8004514:	1a5b      	subs	r3, r3, r1
 8004516:	42ab      	cmp	r3, r5
 8004518:	dcf2      	bgt.n	8004500 <_printf_i+0x210>
 800451a:	e7eb      	b.n	80044f4 <_printf_i+0x204>
 800451c:	2500      	movs	r5, #0
 800451e:	f104 0619 	add.w	r6, r4, #25
 8004522:	e7f5      	b.n	8004510 <_printf_i+0x220>
 8004524:	080047a9 	.word	0x080047a9
 8004528:	080047ba 	.word	0x080047ba

0800452c <memmove>:
 800452c:	4288      	cmp	r0, r1
 800452e:	b510      	push	{r4, lr}
 8004530:	eb01 0402 	add.w	r4, r1, r2
 8004534:	d902      	bls.n	800453c <memmove+0x10>
 8004536:	4284      	cmp	r4, r0
 8004538:	4623      	mov	r3, r4
 800453a:	d807      	bhi.n	800454c <memmove+0x20>
 800453c:	1e43      	subs	r3, r0, #1
 800453e:	42a1      	cmp	r1, r4
 8004540:	d008      	beq.n	8004554 <memmove+0x28>
 8004542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800454a:	e7f8      	b.n	800453e <memmove+0x12>
 800454c:	4402      	add	r2, r0
 800454e:	4601      	mov	r1, r0
 8004550:	428a      	cmp	r2, r1
 8004552:	d100      	bne.n	8004556 <memmove+0x2a>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800455a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800455e:	e7f7      	b.n	8004550 <memmove+0x24>

08004560 <_sbrk_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d06      	ldr	r5, [pc, #24]	@ (800457c <_sbrk_r+0x1c>)
 8004564:	2300      	movs	r3, #0
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	602b      	str	r3, [r5, #0]
 800456c:	f7fc ffb0 	bl	80014d0 <_sbrk>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_sbrk_r+0x1a>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_sbrk_r+0x1a>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20000428 	.word	0x20000428

08004580 <memcpy>:
 8004580:	440a      	add	r2, r1
 8004582:	4291      	cmp	r1, r2
 8004584:	f100 33ff 	add.w	r3, r0, #4294967295
 8004588:	d100      	bne.n	800458c <memcpy+0xc>
 800458a:	4770      	bx	lr
 800458c:	b510      	push	{r4, lr}
 800458e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004596:	4291      	cmp	r1, r2
 8004598:	d1f9      	bne.n	800458e <memcpy+0xe>
 800459a:	bd10      	pop	{r4, pc}

0800459c <_realloc_r>:
 800459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a0:	4607      	mov	r7, r0
 80045a2:	4614      	mov	r4, r2
 80045a4:	460d      	mov	r5, r1
 80045a6:	b921      	cbnz	r1, 80045b2 <_realloc_r+0x16>
 80045a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	4611      	mov	r1, r2
 80045ae:	f7ff bc4d 	b.w	8003e4c <_malloc_r>
 80045b2:	b92a      	cbnz	r2, 80045c0 <_realloc_r+0x24>
 80045b4:	f7ff fbde 	bl	8003d74 <_free_r>
 80045b8:	4625      	mov	r5, r4
 80045ba:	4628      	mov	r0, r5
 80045bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c0:	f000 f81a 	bl	80045f8 <_malloc_usable_size_r>
 80045c4:	4284      	cmp	r4, r0
 80045c6:	4606      	mov	r6, r0
 80045c8:	d802      	bhi.n	80045d0 <_realloc_r+0x34>
 80045ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045ce:	d8f4      	bhi.n	80045ba <_realloc_r+0x1e>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4638      	mov	r0, r7
 80045d4:	f7ff fc3a 	bl	8003e4c <_malloc_r>
 80045d8:	4680      	mov	r8, r0
 80045da:	b908      	cbnz	r0, 80045e0 <_realloc_r+0x44>
 80045dc:	4645      	mov	r5, r8
 80045de:	e7ec      	b.n	80045ba <_realloc_r+0x1e>
 80045e0:	42b4      	cmp	r4, r6
 80045e2:	4622      	mov	r2, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	bf28      	it	cs
 80045e8:	4632      	movcs	r2, r6
 80045ea:	f7ff ffc9 	bl	8004580 <memcpy>
 80045ee:	4629      	mov	r1, r5
 80045f0:	4638      	mov	r0, r7
 80045f2:	f7ff fbbf 	bl	8003d74 <_free_r>
 80045f6:	e7f1      	b.n	80045dc <_realloc_r+0x40>

080045f8 <_malloc_usable_size_r>:
 80045f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fc:	1f18      	subs	r0, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bfbc      	itt	lt
 8004602:	580b      	ldrlt	r3, [r1, r0]
 8004604:	18c0      	addlt	r0, r0, r3
 8004606:	4770      	bx	lr

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
